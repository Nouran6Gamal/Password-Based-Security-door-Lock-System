
Control_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002704  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00002704  00002798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  008000ae  008000ae  000027e6  2**0
                  ALLOC
  3 .stab         00002700  00000000  00000000  000027e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011b7  00000000  00000000  00004ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000609f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000061df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000634f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009c30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a01d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a7eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <main>
      8a:	0c 94 80 13 	jmp	0x2700	; 0x2700 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e9       	ldi	r26, 0x9C	; 156
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c e9       	ldi	r24, 0x9C	; 156
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <APP_init>:
uint8 p1[5],p2[5],second;//2array to save password , a variable to count seconds

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void APP_init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2b 97       	sbiw	r28, 0x0b	; 11
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/* Create configuration structure for UART driver */
	UART_ConfigType UART_Config = {eightBit,otherMode,disabled,oneBit,NTSH}; //8bit data mode , parity bit diabled , one stop bit ,9600 baudrate
     b5a:	ce 01       	movw	r24, r28
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	98 87       	std	Y+8, r25	; 0x08
     b60:	8f 83       	std	Y+7, r24	; 0x07
     b62:	e4 ea       	ldi	r30, 0xA4	; 164
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	fa 87       	std	Y+10, r31	; 0x0a
     b68:	e9 87       	std	Y+9, r30	; 0x09
     b6a:	f6 e0       	ldi	r31, 0x06	; 6
     b6c:	fb 87       	std	Y+11, r31	; 0x0b
     b6e:	e9 85       	ldd	r30, Y+9	; 0x09
     b70:	fa 85       	ldd	r31, Y+10	; 0x0a
     b72:	00 80       	ld	r0, Z
     b74:	89 85       	ldd	r24, Y+9	; 0x09
     b76:	9a 85       	ldd	r25, Y+10	; 0x0a
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	9a 87       	std	Y+10, r25	; 0x0a
     b7c:	89 87       	std	Y+9, r24	; 0x09
     b7e:	ef 81       	ldd	r30, Y+7	; 0x07
     b80:	f8 85       	ldd	r31, Y+8	; 0x08
     b82:	00 82       	st	Z, r0
     b84:	8f 81       	ldd	r24, Y+7	; 0x07
     b86:	98 85       	ldd	r25, Y+8	; 0x08
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	98 87       	std	Y+8, r25	; 0x08
     b8c:	8f 83       	std	Y+7, r24	; 0x07
     b8e:	9b 85       	ldd	r25, Y+11	; 0x0b
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	9b 87       	std	Y+11, r25	; 0x0b
     b94:	eb 85       	ldd	r30, Y+11	; 0x0b
     b96:	ee 23       	and	r30, r30
     b98:	51 f7       	brne	.-44     	; 0xb6e <APP_init+0x28>
	UART_init(&UART_Config);  // initialize UART
     b9a:	ce 01       	movw	r24, r28
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <UART_init>
	EEPROM_init ();//initialize EEPROM
     ba2:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <EEPROM_init>

}
     ba6:	2b 96       	adiw	r28, 0x0b	; 11
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <Receive_Pass>:

void Receive_Pass(void){
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <Receive_Pass+0x6>
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <Receive_Pass+0x8>
     bc0:	0f 92       	push	r0
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
	uint8 p1[5];//array to save password
	while ((UART_recieveByte ()) != READY); //wait for HMI to send ready
     bc6:	0e 94 ac 12 	call	0x2558	; 0x2558 <UART_recieveByte>
     bca:	80 31       	cpi	r24, 0x10	; 16
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <Receive_Pass+0xe>
	UART_receiveString (p1);//receive password from HMI
     bce:	ce 01       	movw	r24, r28
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <UART_receiveString>

}
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	cf 91       	pop	r28
     be2:	df 91       	pop	r29
     be4:	08 95       	ret

00000be6 <ReReceive_Pass>:
void ReReceive_Pass(void){
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	00 d0       	rcall	.+0      	; 0xbec <ReReceive_Pass+0x6>
     bec:	00 d0       	rcall	.+0      	; 0xbee <ReReceive_Pass+0x8>
     bee:	0f 92       	push	r0
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
	uint8 p2[5];//array to save password
	while ((UART_recieveByte ()) != READY);//wait for HMI to send ready
     bf4:	0e 94 ac 12 	call	0x2558	; 0x2558 <UART_recieveByte>
     bf8:	80 31       	cpi	r24, 0x10	; 16
     bfa:	e1 f7       	brne	.-8      	; 0xbf4 <ReReceive_Pass+0xe>
	UART_receiveString (p2);//receive password from HMI
     bfc:	ce 01       	movw	r24, r28
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <UART_receiveString>
}
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <Check_Pass>:


void Check_Pass(void){
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	0f 92       	push	r0
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
	    uint8 i;//variable as a counter
	    for(i=0 ; i<5 ; i++) {
     c1e:	19 82       	std	Y+1, r1	; 0x01
     c20:	21 c0       	rjmp	.+66     	; 0xc64 <Check_Pass+0x50>
		if(p1[i]==p2[i]){
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	88 2f       	mov	r24, r24
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	fc 01       	movw	r30, r24
     c2a:	e5 54       	subi	r30, 0x45	; 69
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	20 81       	ld	r18, Z
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	88 2f       	mov	r24, r24
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	fc 01       	movw	r30, r24
     c38:	eb 54       	subi	r30, 0x4B	; 75
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	80 81       	ld	r24, Z
     c3e:	28 17       	cp	r18, r24
     c40:	51 f4       	brne	.+20     	; 0xc56 <Check_Pass+0x42>
		UART_sendByte (READY);/*inform HMI that Control is ready to send pass status*/
     c42:	80 e1       	ldi	r24, 0x10	; 16
     c44:	0e 94 95 12 	call	0x252a	; 0x252a <UART_sendByte>
		UART_sendString("Pass Match#"); // send the required string to HMI
     c48:	80 e6       	ldi	r24, 0x60	; 96
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendString>
		Store_Pass(); //store password in EEPROM
     c50:	0e 94 39 06 	call	0xc72	; 0xc72 <Store_Pass>
     c54:	04 c0       	rjmp	.+8      	; 0xc5e <Check_Pass+0x4a>
		}
		else{
		UART_sendString("Pass not Match#"); // send the required string to HMI
     c56:	8c e6       	ldi	r24, 0x6C	; 108
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendString>
}


void Check_Pass(void){
	    uint8 i;//variable as a counter
	    for(i=0 ; i<5 ; i++) {
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	8f 5f       	subi	r24, 0xFF	; 255
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	85 30       	cpi	r24, 0x05	; 5
     c68:	e0 f2       	brcs	.-72     	; 0xc22 <Check_Pass+0xe>
		UART_sendString("Pass not Match#"); // send the required string to HMI

		}

	}
}
     c6a:	0f 90       	pop	r0
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <Store_Pass>:

void Store_Pass(void){
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
     c7e:	c6 54       	subi	r28, 0x46	; 70
     c80:	d0 40       	sbci	r29, 0x00	; 0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
	/*save pass in EEPROM*/
	EEPROM_writeByte (0x0311,p1[0]);
     c8c:	20 91 bb 00 	lds	r18, 0x00BB
     c90:	81 e1       	ldi	r24, 0x11	; 17
     c92:	93 e0       	ldi	r25, 0x03	; 3
     c94:	62 2f       	mov	r22, r18
     c96:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <EEPROM_writeByte>
     c9a:	fe 01       	movw	r30, r28
     c9c:	ed 5b       	subi	r30, 0xBD	; 189
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	a0 e2       	ldi	r26, 0x20	; 32
     ca6:	b1 e4       	ldi	r27, 0x41	; 65
     ca8:	80 83       	st	Z, r24
     caa:	91 83       	std	Z+1, r25	; 0x01
     cac:	a2 83       	std	Z+2, r26	; 0x02
     cae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb0:	8e 01       	movw	r16, r28
     cb2:	01 5c       	subi	r16, 0xC1	; 193
     cb4:	1f 4f       	sbci	r17, 0xFF	; 255
     cb6:	fe 01       	movw	r30, r28
     cb8:	ed 5b       	subi	r30, 0xBD	; 189
     cba:	ff 4f       	sbci	r31, 0xFF	; 255
     cbc:	60 81       	ld	r22, Z
     cbe:	71 81       	ldd	r23, Z+1	; 0x01
     cc0:	82 81       	ldd	r24, Z+2	; 0x02
     cc2:	93 81       	ldd	r25, Z+3	; 0x03
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	4a e7       	ldi	r20, 0x7A	; 122
     cca:	53 e4       	ldi	r21, 0x43	; 67
     ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd0:	dc 01       	movw	r26, r24
     cd2:	cb 01       	movw	r24, r22
     cd4:	f8 01       	movw	r30, r16
     cd6:	80 83       	st	Z, r24
     cd8:	91 83       	std	Z+1, r25	; 0x01
     cda:	a2 83       	std	Z+2, r26	; 0x02
     cdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cde:	fe 01       	movw	r30, r28
     ce0:	ff 96       	adiw	r30, 0x3f	; 63
     ce2:	60 81       	ld	r22, Z
     ce4:	71 81       	ldd	r23, Z+1	; 0x01
     ce6:	82 81       	ldd	r24, Z+2	; 0x02
     ce8:	93 81       	ldd	r25, Z+3	; 0x03
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	40 e8       	ldi	r20, 0x80	; 128
     cf0:	5f e3       	ldi	r21, 0x3F	; 63
     cf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cf6:	88 23       	and	r24, r24
     cf8:	2c f4       	brge	.+10     	; 0xd04 <Store_Pass+0x92>
		__ticks = 1;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	9e af       	std	Y+62, r25	; 0x3e
     d00:	8d af       	std	Y+61, r24	; 0x3d
     d02:	46 c0       	rjmp	.+140    	; 0xd90 <Store_Pass+0x11e>
	else if (__tmp > 65535)
     d04:	fe 01       	movw	r30, r28
     d06:	ff 96       	adiw	r30, 0x3f	; 63
     d08:	60 81       	ld	r22, Z
     d0a:	71 81       	ldd	r23, Z+1	; 0x01
     d0c:	82 81       	ldd	r24, Z+2	; 0x02
     d0e:	93 81       	ldd	r25, Z+3	; 0x03
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	3f ef       	ldi	r19, 0xFF	; 255
     d14:	4f e7       	ldi	r20, 0x7F	; 127
     d16:	57 e4       	ldi	r21, 0x47	; 71
     d18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d1c:	18 16       	cp	r1, r24
     d1e:	64 f5       	brge	.+88     	; 0xd78 <Store_Pass+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d20:	fe 01       	movw	r30, r28
     d22:	ed 5b       	subi	r30, 0xBD	; 189
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	60 81       	ld	r22, Z
     d28:	71 81       	ldd	r23, Z+1	; 0x01
     d2a:	82 81       	ldd	r24, Z+2	; 0x02
     d2c:	93 81       	ldd	r25, Z+3	; 0x03
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	40 e2       	ldi	r20, 0x20	; 32
     d34:	51 e4       	ldi	r21, 0x41	; 65
     d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	bc 01       	movw	r22, r24
     d40:	cd 01       	movw	r24, r26
     d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	9e af       	std	Y+62, r25	; 0x3e
     d4c:	8d af       	std	Y+61, r24	; 0x3d
     d4e:	0f c0       	rjmp	.+30     	; 0xd6e <Store_Pass+0xfc>
     d50:	89 e1       	ldi	r24, 0x19	; 25
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	9c af       	std	Y+60, r25	; 0x3c
     d56:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d58:	8b ad       	ldd	r24, Y+59	; 0x3b
     d5a:	9c ad       	ldd	r25, Y+60	; 0x3c
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <Store_Pass+0xea>
     d60:	9c af       	std	Y+60, r25	; 0x3c
     d62:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d64:	8d ad       	ldd	r24, Y+61	; 0x3d
     d66:	9e ad       	ldd	r25, Y+62	; 0x3e
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	9e af       	std	Y+62, r25	; 0x3e
     d6c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6e:	8d ad       	ldd	r24, Y+61	; 0x3d
     d70:	9e ad       	ldd	r25, Y+62	; 0x3e
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	69 f7       	brne	.-38     	; 0xd50 <Store_Pass+0xde>
     d76:	16 c0       	rjmp	.+44     	; 0xda4 <Store_Pass+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d78:	fe 01       	movw	r30, r28
     d7a:	ff 96       	adiw	r30, 0x3f	; 63
     d7c:	60 81       	ld	r22, Z
     d7e:	71 81       	ldd	r23, Z+1	; 0x01
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	93 81       	ldd	r25, Z+3	; 0x03
     d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d88:	dc 01       	movw	r26, r24
     d8a:	cb 01       	movw	r24, r22
     d8c:	9e af       	std	Y+62, r25	; 0x3e
     d8e:	8d af       	std	Y+61, r24	; 0x3d
     d90:	8d ad       	ldd	r24, Y+61	; 0x3d
     d92:	9e ad       	ldd	r25, Y+62	; 0x3e
     d94:	9a af       	std	Y+58, r25	; 0x3a
     d96:	89 af       	std	Y+57, r24	; 0x39
     d98:	89 ad       	ldd	r24, Y+57	; 0x39
     d9a:	9a ad       	ldd	r25, Y+58	; 0x3a
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	f1 f7       	brne	.-4      	; 0xd9c <Store_Pass+0x12a>
     da0:	9a af       	std	Y+58, r25	; 0x3a
     da2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms (10);
	EEPROM_writeByte (0x0312,p1[1]);
     da4:	20 91 bc 00 	lds	r18, 0x00BC
     da8:	82 e1       	ldi	r24, 0x12	; 18
     daa:	93 e0       	ldi	r25, 0x03	; 3
     dac:	62 2f       	mov	r22, r18
     dae:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <EEPROM_writeByte>
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	a0 e2       	ldi	r26, 0x20	; 32
     db8:	b1 e4       	ldi	r27, 0x41	; 65
     dba:	8d ab       	std	Y+53, r24	; 0x35
     dbc:	9e ab       	std	Y+54, r25	; 0x36
     dbe:	af ab       	std	Y+55, r26	; 0x37
     dc0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc2:	6d a9       	ldd	r22, Y+53	; 0x35
     dc4:	7e a9       	ldd	r23, Y+54	; 0x36
     dc6:	8f a9       	ldd	r24, Y+55	; 0x37
     dc8:	98 ad       	ldd	r25, Y+56	; 0x38
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	4a e7       	ldi	r20, 0x7A	; 122
     dd0:	53 e4       	ldi	r21, 0x43	; 67
     dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	89 ab       	std	Y+49, r24	; 0x31
     ddc:	9a ab       	std	Y+50, r25	; 0x32
     dde:	ab ab       	std	Y+51, r26	; 0x33
     de0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     de2:	69 a9       	ldd	r22, Y+49	; 0x31
     de4:	7a a9       	ldd	r23, Y+50	; 0x32
     de6:	8b a9       	ldd	r24, Y+51	; 0x33
     de8:	9c a9       	ldd	r25, Y+52	; 0x34
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e8       	ldi	r20, 0x80	; 128
     df0:	5f e3       	ldi	r21, 0x3F	; 63
     df2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     df6:	88 23       	and	r24, r24
     df8:	2c f4       	brge	.+10     	; 0xe04 <Store_Pass+0x192>
		__ticks = 1;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	98 ab       	std	Y+48, r25	; 0x30
     e00:	8f a7       	std	Y+47, r24	; 0x2f
     e02:	3f c0       	rjmp	.+126    	; 0xe82 <Store_Pass+0x210>
	else if (__tmp > 65535)
     e04:	69 a9       	ldd	r22, Y+49	; 0x31
     e06:	7a a9       	ldd	r23, Y+50	; 0x32
     e08:	8b a9       	ldd	r24, Y+51	; 0x33
     e0a:	9c a9       	ldd	r25, Y+52	; 0x34
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	3f ef       	ldi	r19, 0xFF	; 255
     e10:	4f e7       	ldi	r20, 0x7F	; 127
     e12:	57 e4       	ldi	r21, 0x47	; 71
     e14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e18:	18 16       	cp	r1, r24
     e1a:	4c f5       	brge	.+82     	; 0xe6e <Store_Pass+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1c:	6d a9       	ldd	r22, Y+53	; 0x35
     e1e:	7e a9       	ldd	r23, Y+54	; 0x36
     e20:	8f a9       	ldd	r24, Y+55	; 0x37
     e22:	98 ad       	ldd	r25, Y+56	; 0x38
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	40 e2       	ldi	r20, 0x20	; 32
     e2a:	51 e4       	ldi	r21, 0x41	; 65
     e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	bc 01       	movw	r22, r24
     e36:	cd 01       	movw	r24, r26
     e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3c:	dc 01       	movw	r26, r24
     e3e:	cb 01       	movw	r24, r22
     e40:	98 ab       	std	Y+48, r25	; 0x30
     e42:	8f a7       	std	Y+47, r24	; 0x2f
     e44:	0f c0       	rjmp	.+30     	; 0xe64 <Store_Pass+0x1f2>
     e46:	89 e1       	ldi	r24, 0x19	; 25
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	9e a7       	std	Y+46, r25	; 0x2e
     e4c:	8d a7       	std	Y+45, r24	; 0x2d
     e4e:	8d a5       	ldd	r24, Y+45	; 0x2d
     e50:	9e a5       	ldd	r25, Y+46	; 0x2e
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	f1 f7       	brne	.-4      	; 0xe52 <Store_Pass+0x1e0>
     e56:	9e a7       	std	Y+46, r25	; 0x2e
     e58:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e5c:	98 a9       	ldd	r25, Y+48	; 0x30
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	98 ab       	std	Y+48, r25	; 0x30
     e62:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e64:	8f a5       	ldd	r24, Y+47	; 0x2f
     e66:	98 a9       	ldd	r25, Y+48	; 0x30
     e68:	00 97       	sbiw	r24, 0x00	; 0
     e6a:	69 f7       	brne	.-38     	; 0xe46 <Store_Pass+0x1d4>
     e6c:	14 c0       	rjmp	.+40     	; 0xe96 <Store_Pass+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e6e:	69 a9       	ldd	r22, Y+49	; 0x31
     e70:	7a a9       	ldd	r23, Y+50	; 0x32
     e72:	8b a9       	ldd	r24, Y+51	; 0x33
     e74:	9c a9       	ldd	r25, Y+52	; 0x34
     e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	98 ab       	std	Y+48, r25	; 0x30
     e80:	8f a7       	std	Y+47, r24	; 0x2f
     e82:	8f a5       	ldd	r24, Y+47	; 0x2f
     e84:	98 a9       	ldd	r25, Y+48	; 0x30
     e86:	9c a7       	std	Y+44, r25	; 0x2c
     e88:	8b a7       	std	Y+43, r24	; 0x2b
     e8a:	8b a5       	ldd	r24, Y+43	; 0x2b
     e8c:	9c a5       	ldd	r25, Y+44	; 0x2c
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	f1 f7       	brne	.-4      	; 0xe8e <Store_Pass+0x21c>
     e92:	9c a7       	std	Y+44, r25	; 0x2c
     e94:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms (10);
	EEPROM_writeByte (0x0313,p1[2]);
     e96:	20 91 bd 00 	lds	r18, 0x00BD
     e9a:	83 e1       	ldi	r24, 0x13	; 19
     e9c:	93 e0       	ldi	r25, 0x03	; 3
     e9e:	62 2f       	mov	r22, r18
     ea0:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <EEPROM_writeByte>
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	a0 e2       	ldi	r26, 0x20	; 32
     eaa:	b1 e4       	ldi	r27, 0x41	; 65
     eac:	8f a3       	std	Y+39, r24	; 0x27
     eae:	98 a7       	std	Y+40, r25	; 0x28
     eb0:	a9 a7       	std	Y+41, r26	; 0x29
     eb2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb4:	6f a1       	ldd	r22, Y+39	; 0x27
     eb6:	78 a5       	ldd	r23, Y+40	; 0x28
     eb8:	89 a5       	ldd	r24, Y+41	; 0x29
     eba:	9a a5       	ldd	r25, Y+42	; 0x2a
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	4a e7       	ldi	r20, 0x7A	; 122
     ec2:	53 e4       	ldi	r21, 0x43	; 67
     ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	8b a3       	std	Y+35, r24	; 0x23
     ece:	9c a3       	std	Y+36, r25	; 0x24
     ed0:	ad a3       	std	Y+37, r26	; 0x25
     ed2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ed4:	6b a1       	ldd	r22, Y+35	; 0x23
     ed6:	7c a1       	ldd	r23, Y+36	; 0x24
     ed8:	8d a1       	ldd	r24, Y+37	; 0x25
     eda:	9e a1       	ldd	r25, Y+38	; 0x26
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e8       	ldi	r20, 0x80	; 128
     ee2:	5f e3       	ldi	r21, 0x3F	; 63
     ee4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ee8:	88 23       	and	r24, r24
     eea:	2c f4       	brge	.+10     	; 0xef6 <Store_Pass+0x284>
		__ticks = 1;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	9a a3       	std	Y+34, r25	; 0x22
     ef2:	89 a3       	std	Y+33, r24	; 0x21
     ef4:	3f c0       	rjmp	.+126    	; 0xf74 <Store_Pass+0x302>
	else if (__tmp > 65535)
     ef6:	6b a1       	ldd	r22, Y+35	; 0x23
     ef8:	7c a1       	ldd	r23, Y+36	; 0x24
     efa:	8d a1       	ldd	r24, Y+37	; 0x25
     efc:	9e a1       	ldd	r25, Y+38	; 0x26
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	3f ef       	ldi	r19, 0xFF	; 255
     f02:	4f e7       	ldi	r20, 0x7F	; 127
     f04:	57 e4       	ldi	r21, 0x47	; 71
     f06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f0a:	18 16       	cp	r1, r24
     f0c:	4c f5       	brge	.+82     	; 0xf60 <Store_Pass+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f0e:	6f a1       	ldd	r22, Y+39	; 0x27
     f10:	78 a5       	ldd	r23, Y+40	; 0x28
     f12:	89 a5       	ldd	r24, Y+41	; 0x29
     f14:	9a a5       	ldd	r25, Y+42	; 0x2a
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e2       	ldi	r20, 0x20	; 32
     f1c:	51 e4       	ldi	r21, 0x41	; 65
     f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	bc 01       	movw	r22, r24
     f28:	cd 01       	movw	r24, r26
     f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	9a a3       	std	Y+34, r25	; 0x22
     f34:	89 a3       	std	Y+33, r24	; 0x21
     f36:	0f c0       	rjmp	.+30     	; 0xf56 <Store_Pass+0x2e4>
     f38:	89 e1       	ldi	r24, 0x19	; 25
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	98 a3       	std	Y+32, r25	; 0x20
     f3e:	8f 8f       	std	Y+31, r24	; 0x1f
     f40:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f42:	98 a1       	ldd	r25, Y+32	; 0x20
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <Store_Pass+0x2d2>
     f48:	98 a3       	std	Y+32, r25	; 0x20
     f4a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f4c:	89 a1       	ldd	r24, Y+33	; 0x21
     f4e:	9a a1       	ldd	r25, Y+34	; 0x22
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	9a a3       	std	Y+34, r25	; 0x22
     f54:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f56:	89 a1       	ldd	r24, Y+33	; 0x21
     f58:	9a a1       	ldd	r25, Y+34	; 0x22
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	69 f7       	brne	.-38     	; 0xf38 <Store_Pass+0x2c6>
     f5e:	14 c0       	rjmp	.+40     	; 0xf88 <Store_Pass+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f60:	6b a1       	ldd	r22, Y+35	; 0x23
     f62:	7c a1       	ldd	r23, Y+36	; 0x24
     f64:	8d a1       	ldd	r24, Y+37	; 0x25
     f66:	9e a1       	ldd	r25, Y+38	; 0x26
     f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	9a a3       	std	Y+34, r25	; 0x22
     f72:	89 a3       	std	Y+33, r24	; 0x21
     f74:	89 a1       	ldd	r24, Y+33	; 0x21
     f76:	9a a1       	ldd	r25, Y+34	; 0x22
     f78:	9e 8f       	std	Y+30, r25	; 0x1e
     f7a:	8d 8f       	std	Y+29, r24	; 0x1d
     f7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <Store_Pass+0x30e>
     f84:	9e 8f       	std	Y+30, r25	; 0x1e
     f86:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms (10);
	EEPROM_writeByte (0x0314,p1[3]);
     f88:	20 91 be 00 	lds	r18, 0x00BE
     f8c:	84 e1       	ldi	r24, 0x14	; 20
     f8e:	93 e0       	ldi	r25, 0x03	; 3
     f90:	62 2f       	mov	r22, r18
     f92:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <EEPROM_writeByte>
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	a0 e2       	ldi	r26, 0x20	; 32
     f9c:	b1 e4       	ldi	r27, 0x41	; 65
     f9e:	89 8f       	std	Y+25, r24	; 0x19
     fa0:	9a 8f       	std	Y+26, r25	; 0x1a
     fa2:	ab 8f       	std	Y+27, r26	; 0x1b
     fa4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa6:	69 8d       	ldd	r22, Y+25	; 0x19
     fa8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     faa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fac:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	4a e7       	ldi	r20, 0x7A	; 122
     fb4:	53 e4       	ldi	r21, 0x43	; 67
     fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	8d 8b       	std	Y+21, r24	; 0x15
     fc0:	9e 8b       	std	Y+22, r25	; 0x16
     fc2:	af 8b       	std	Y+23, r26	; 0x17
     fc4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fc6:	6d 89       	ldd	r22, Y+21	; 0x15
     fc8:	7e 89       	ldd	r23, Y+22	; 0x16
     fca:	8f 89       	ldd	r24, Y+23	; 0x17
     fcc:	98 8d       	ldd	r25, Y+24	; 0x18
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e8       	ldi	r20, 0x80	; 128
     fd4:	5f e3       	ldi	r21, 0x3F	; 63
     fd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fda:	88 23       	and	r24, r24
     fdc:	2c f4       	brge	.+10     	; 0xfe8 <Store_Pass+0x376>
		__ticks = 1;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	9c 8b       	std	Y+20, r25	; 0x14
     fe4:	8b 8b       	std	Y+19, r24	; 0x13
     fe6:	3f c0       	rjmp	.+126    	; 0x1066 <Store_Pass+0x3f4>
	else if (__tmp > 65535)
     fe8:	6d 89       	ldd	r22, Y+21	; 0x15
     fea:	7e 89       	ldd	r23, Y+22	; 0x16
     fec:	8f 89       	ldd	r24, Y+23	; 0x17
     fee:	98 8d       	ldd	r25, Y+24	; 0x18
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	3f ef       	ldi	r19, 0xFF	; 255
     ff4:	4f e7       	ldi	r20, 0x7F	; 127
     ff6:	57 e4       	ldi	r21, 0x47	; 71
     ff8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ffc:	18 16       	cp	r1, r24
     ffe:	4c f5       	brge	.+82     	; 0x1052 <Store_Pass+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1000:	69 8d       	ldd	r22, Y+25	; 0x19
    1002:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1004:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1006:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e2       	ldi	r20, 0x20	; 32
    100e:	51 e4       	ldi	r21, 0x41	; 65
    1010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	bc 01       	movw	r22, r24
    101a:	cd 01       	movw	r24, r26
    101c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	9c 8b       	std	Y+20, r25	; 0x14
    1026:	8b 8b       	std	Y+19, r24	; 0x13
    1028:	0f c0       	rjmp	.+30     	; 0x1048 <Store_Pass+0x3d6>
    102a:	89 e1       	ldi	r24, 0x19	; 25
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	9a 8b       	std	Y+18, r25	; 0x12
    1030:	89 8b       	std	Y+17, r24	; 0x11
    1032:	89 89       	ldd	r24, Y+17	; 0x11
    1034:	9a 89       	ldd	r25, Y+18	; 0x12
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	f1 f7       	brne	.-4      	; 0x1036 <Store_Pass+0x3c4>
    103a:	9a 8b       	std	Y+18, r25	; 0x12
    103c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    103e:	8b 89       	ldd	r24, Y+19	; 0x13
    1040:	9c 89       	ldd	r25, Y+20	; 0x14
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	9c 8b       	std	Y+20, r25	; 0x14
    1046:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1048:	8b 89       	ldd	r24, Y+19	; 0x13
    104a:	9c 89       	ldd	r25, Y+20	; 0x14
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	69 f7       	brne	.-38     	; 0x102a <Store_Pass+0x3b8>
    1050:	14 c0       	rjmp	.+40     	; 0x107a <Store_Pass+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1052:	6d 89       	ldd	r22, Y+21	; 0x15
    1054:	7e 89       	ldd	r23, Y+22	; 0x16
    1056:	8f 89       	ldd	r24, Y+23	; 0x17
    1058:	98 8d       	ldd	r25, Y+24	; 0x18
    105a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	9c 8b       	std	Y+20, r25	; 0x14
    1064:	8b 8b       	std	Y+19, r24	; 0x13
    1066:	8b 89       	ldd	r24, Y+19	; 0x13
    1068:	9c 89       	ldd	r25, Y+20	; 0x14
    106a:	98 8b       	std	Y+16, r25	; 0x10
    106c:	8f 87       	std	Y+15, r24	; 0x0f
    106e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1070:	98 89       	ldd	r25, Y+16	; 0x10
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <Store_Pass+0x400>
    1076:	98 8b       	std	Y+16, r25	; 0x10
    1078:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (10);
	EEPROM_writeByte (0x0315,p1[4]);
    107a:	20 91 bf 00 	lds	r18, 0x00BF
    107e:	85 e1       	ldi	r24, 0x15	; 21
    1080:	93 e0       	ldi	r25, 0x03	; 3
    1082:	62 2f       	mov	r22, r18
    1084:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <EEPROM_writeByte>
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	a0 e2       	ldi	r26, 0x20	; 32
    108e:	b1 e4       	ldi	r27, 0x41	; 65
    1090:	8b 87       	std	Y+11, r24	; 0x0b
    1092:	9c 87       	std	Y+12, r25	; 0x0c
    1094:	ad 87       	std	Y+13, r26	; 0x0d
    1096:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1098:	6b 85       	ldd	r22, Y+11	; 0x0b
    109a:	7c 85       	ldd	r23, Y+12	; 0x0c
    109c:	8d 85       	ldd	r24, Y+13	; 0x0d
    109e:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	4a e7       	ldi	r20, 0x7A	; 122
    10a6:	53 e4       	ldi	r21, 0x43	; 67
    10a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	8f 83       	std	Y+7, r24	; 0x07
    10b2:	98 87       	std	Y+8, r25	; 0x08
    10b4:	a9 87       	std	Y+9, r26	; 0x09
    10b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10b8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ba:	78 85       	ldd	r23, Y+8	; 0x08
    10bc:	89 85       	ldd	r24, Y+9	; 0x09
    10be:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e8       	ldi	r20, 0x80	; 128
    10c6:	5f e3       	ldi	r21, 0x3F	; 63
    10c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10cc:	88 23       	and	r24, r24
    10ce:	2c f4       	brge	.+10     	; 0x10da <Store_Pass+0x468>
		__ticks = 1;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	9e 83       	std	Y+6, r25	; 0x06
    10d6:	8d 83       	std	Y+5, r24	; 0x05
    10d8:	3f c0       	rjmp	.+126    	; 0x1158 <Store_Pass+0x4e6>
	else if (__tmp > 65535)
    10da:	6f 81       	ldd	r22, Y+7	; 0x07
    10dc:	78 85       	ldd	r23, Y+8	; 0x08
    10de:	89 85       	ldd	r24, Y+9	; 0x09
    10e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	3f ef       	ldi	r19, 0xFF	; 255
    10e6:	4f e7       	ldi	r20, 0x7F	; 127
    10e8:	57 e4       	ldi	r21, 0x47	; 71
    10ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10ee:	18 16       	cp	r1, r24
    10f0:	4c f5       	brge	.+82     	; 0x1144 <Store_Pass+0x4d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e2       	ldi	r20, 0x20	; 32
    1100:	51 e4       	ldi	r21, 0x41	; 65
    1102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	bc 01       	movw	r22, r24
    110c:	cd 01       	movw	r24, r26
    110e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	9e 83       	std	Y+6, r25	; 0x06
    1118:	8d 83       	std	Y+5, r24	; 0x05
    111a:	0f c0       	rjmp	.+30     	; 0x113a <Store_Pass+0x4c8>
    111c:	89 e1       	ldi	r24, 0x19	; 25
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	9c 83       	std	Y+4, r25	; 0x04
    1122:	8b 83       	std	Y+3, r24	; 0x03
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	9c 81       	ldd	r25, Y+4	; 0x04
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	f1 f7       	brne	.-4      	; 0x1128 <Store_Pass+0x4b6>
    112c:	9c 83       	std	Y+4, r25	; 0x04
    112e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1130:	8d 81       	ldd	r24, Y+5	; 0x05
    1132:	9e 81       	ldd	r25, Y+6	; 0x06
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	9e 83       	std	Y+6, r25	; 0x06
    1138:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	9e 81       	ldd	r25, Y+6	; 0x06
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	69 f7       	brne	.-38     	; 0x111c <Store_Pass+0x4aa>
    1142:	14 c0       	rjmp	.+40     	; 0x116c <Store_Pass+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1144:	6f 81       	ldd	r22, Y+7	; 0x07
    1146:	78 85       	ldd	r23, Y+8	; 0x08
    1148:	89 85       	ldd	r24, Y+9	; 0x09
    114a:	9a 85       	ldd	r25, Y+10	; 0x0a
    114c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	9e 83       	std	Y+6, r25	; 0x06
    1156:	8d 83       	std	Y+5, r24	; 0x05
    1158:	8d 81       	ldd	r24, Y+5	; 0x05
    115a:	9e 81       	ldd	r25, Y+6	; 0x06
    115c:	9a 83       	std	Y+2, r25	; 0x02
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	9a 81       	ldd	r25, Y+2	; 0x02
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	f1 f7       	brne	.-4      	; 0x1164 <Store_Pass+0x4f2>
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	89 83       	std	Y+1, r24	; 0x01
	//for (i=0 ; i<5 ; i++)
	//	{
	//		EEPROM_writeByte ((0x0460+i),p1[i]);
	//		_delay_ms (50);
	//}
}
    116c:	ca 5b       	subi	r28, 0xBA	; 186
    116e:	df 4f       	sbci	r29, 0xFF	; 255
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	08 95       	ret

00001184 <Read_Pass>:
void Read_Pass(void){
    1184:	0f 93       	push	r16
    1186:	1f 93       	push	r17
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	c6 54       	subi	r28, 0x46	; 70
    1192:	d0 40       	sbci	r29, 0x00	; 0
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
	//	EEPROM_readByte ((0x0311+i),&p1[i]);
	//	_delay_ms (50);
	//}

	/*read password from EEPREOM*/
	EEPROM_readByte (0x0311,&p2[0]);
    119e:	25 eb       	ldi	r18, 0xB5	; 181
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e1       	ldi	r24, 0x11	; 17
    11a4:	93 e0       	ldi	r25, 0x03	; 3
    11a6:	b9 01       	movw	r22, r18
    11a8:	0e 94 02 10 	call	0x2004	; 0x2004 <EEPROM_readByte>
    11ac:	fe 01       	movw	r30, r28
    11ae:	ed 5b       	subi	r30, 0xBD	; 189
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	a0 e2       	ldi	r26, 0x20	; 32
    11b8:	b1 e4       	ldi	r27, 0x41	; 65
    11ba:	80 83       	st	Z, r24
    11bc:	91 83       	std	Z+1, r25	; 0x01
    11be:	a2 83       	std	Z+2, r26	; 0x02
    11c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c2:	8e 01       	movw	r16, r28
    11c4:	01 5c       	subi	r16, 0xC1	; 193
    11c6:	1f 4f       	sbci	r17, 0xFF	; 255
    11c8:	fe 01       	movw	r30, r28
    11ca:	ed 5b       	subi	r30, 0xBD	; 189
    11cc:	ff 4f       	sbci	r31, 0xFF	; 255
    11ce:	60 81       	ld	r22, Z
    11d0:	71 81       	ldd	r23, Z+1	; 0x01
    11d2:	82 81       	ldd	r24, Z+2	; 0x02
    11d4:	93 81       	ldd	r25, Z+3	; 0x03
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	4a e7       	ldi	r20, 0x7A	; 122
    11dc:	53 e4       	ldi	r21, 0x43	; 67
    11de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	f8 01       	movw	r30, r16
    11e8:	80 83       	st	Z, r24
    11ea:	91 83       	std	Z+1, r25	; 0x01
    11ec:	a2 83       	std	Z+2, r26	; 0x02
    11ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11f0:	fe 01       	movw	r30, r28
    11f2:	ff 96       	adiw	r30, 0x3f	; 63
    11f4:	60 81       	ld	r22, Z
    11f6:	71 81       	ldd	r23, Z+1	; 0x01
    11f8:	82 81       	ldd	r24, Z+2	; 0x02
    11fa:	93 81       	ldd	r25, Z+3	; 0x03
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e8       	ldi	r20, 0x80	; 128
    1202:	5f e3       	ldi	r21, 0x3F	; 63
    1204:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1208:	88 23       	and	r24, r24
    120a:	2c f4       	brge	.+10     	; 0x1216 <Read_Pass+0x92>
		__ticks = 1;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	9e af       	std	Y+62, r25	; 0x3e
    1212:	8d af       	std	Y+61, r24	; 0x3d
    1214:	46 c0       	rjmp	.+140    	; 0x12a2 <Read_Pass+0x11e>
	else if (__tmp > 65535)
    1216:	fe 01       	movw	r30, r28
    1218:	ff 96       	adiw	r30, 0x3f	; 63
    121a:	60 81       	ld	r22, Z
    121c:	71 81       	ldd	r23, Z+1	; 0x01
    121e:	82 81       	ldd	r24, Z+2	; 0x02
    1220:	93 81       	ldd	r25, Z+3	; 0x03
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	3f ef       	ldi	r19, 0xFF	; 255
    1226:	4f e7       	ldi	r20, 0x7F	; 127
    1228:	57 e4       	ldi	r21, 0x47	; 71
    122a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    122e:	18 16       	cp	r1, r24
    1230:	64 f5       	brge	.+88     	; 0x128a <Read_Pass+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1232:	fe 01       	movw	r30, r28
    1234:	ed 5b       	subi	r30, 0xBD	; 189
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	60 81       	ld	r22, Z
    123a:	71 81       	ldd	r23, Z+1	; 0x01
    123c:	82 81       	ldd	r24, Z+2	; 0x02
    123e:	93 81       	ldd	r25, Z+3	; 0x03
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 e2       	ldi	r20, 0x20	; 32
    1246:	51 e4       	ldi	r21, 0x41	; 65
    1248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	bc 01       	movw	r22, r24
    1252:	cd 01       	movw	r24, r26
    1254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	9e af       	std	Y+62, r25	; 0x3e
    125e:	8d af       	std	Y+61, r24	; 0x3d
    1260:	0f c0       	rjmp	.+30     	; 0x1280 <Read_Pass+0xfc>
    1262:	89 e1       	ldi	r24, 0x19	; 25
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9c af       	std	Y+60, r25	; 0x3c
    1268:	8b af       	std	Y+59, r24	; 0x3b
    126a:	8b ad       	ldd	r24, Y+59	; 0x3b
    126c:	9c ad       	ldd	r25, Y+60	; 0x3c
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	f1 f7       	brne	.-4      	; 0x126e <Read_Pass+0xea>
    1272:	9c af       	std	Y+60, r25	; 0x3c
    1274:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1276:	8d ad       	ldd	r24, Y+61	; 0x3d
    1278:	9e ad       	ldd	r25, Y+62	; 0x3e
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	9e af       	std	Y+62, r25	; 0x3e
    127e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1280:	8d ad       	ldd	r24, Y+61	; 0x3d
    1282:	9e ad       	ldd	r25, Y+62	; 0x3e
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	69 f7       	brne	.-38     	; 0x1262 <Read_Pass+0xde>
    1288:	16 c0       	rjmp	.+44     	; 0x12b6 <Read_Pass+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    128a:	fe 01       	movw	r30, r28
    128c:	ff 96       	adiw	r30, 0x3f	; 63
    128e:	60 81       	ld	r22, Z
    1290:	71 81       	ldd	r23, Z+1	; 0x01
    1292:	82 81       	ldd	r24, Z+2	; 0x02
    1294:	93 81       	ldd	r25, Z+3	; 0x03
    1296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	9e af       	std	Y+62, r25	; 0x3e
    12a0:	8d af       	std	Y+61, r24	; 0x3d
    12a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    12a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    12a6:	9a af       	std	Y+58, r25	; 0x3a
    12a8:	89 af       	std	Y+57, r24	; 0x39
    12aa:	89 ad       	ldd	r24, Y+57	; 0x39
    12ac:	9a ad       	ldd	r25, Y+58	; 0x3a
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	f1 f7       	brne	.-4      	; 0x12ae <Read_Pass+0x12a>
    12b2:	9a af       	std	Y+58, r25	; 0x3a
    12b4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms (10);
	EEPROM_readByte (0x0312,&p2[1]);
    12b6:	26 eb       	ldi	r18, 0xB6	; 182
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	82 e1       	ldi	r24, 0x12	; 18
    12bc:	93 e0       	ldi	r25, 0x03	; 3
    12be:	b9 01       	movw	r22, r18
    12c0:	0e 94 02 10 	call	0x2004	; 0x2004 <EEPROM_readByte>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	a0 e2       	ldi	r26, 0x20	; 32
    12ca:	b1 e4       	ldi	r27, 0x41	; 65
    12cc:	8d ab       	std	Y+53, r24	; 0x35
    12ce:	9e ab       	std	Y+54, r25	; 0x36
    12d0:	af ab       	std	Y+55, r26	; 0x37
    12d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d4:	6d a9       	ldd	r22, Y+53	; 0x35
    12d6:	7e a9       	ldd	r23, Y+54	; 0x36
    12d8:	8f a9       	ldd	r24, Y+55	; 0x37
    12da:	98 ad       	ldd	r25, Y+56	; 0x38
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	4a e7       	ldi	r20, 0x7A	; 122
    12e2:	53 e4       	ldi	r21, 0x43	; 67
    12e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	89 ab       	std	Y+49, r24	; 0x31
    12ee:	9a ab       	std	Y+50, r25	; 0x32
    12f0:	ab ab       	std	Y+51, r26	; 0x33
    12f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12f4:	69 a9       	ldd	r22, Y+49	; 0x31
    12f6:	7a a9       	ldd	r23, Y+50	; 0x32
    12f8:	8b a9       	ldd	r24, Y+51	; 0x33
    12fa:	9c a9       	ldd	r25, Y+52	; 0x34
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e8       	ldi	r20, 0x80	; 128
    1302:	5f e3       	ldi	r21, 0x3F	; 63
    1304:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1308:	88 23       	and	r24, r24
    130a:	2c f4       	brge	.+10     	; 0x1316 <Read_Pass+0x192>
		__ticks = 1;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	98 ab       	std	Y+48, r25	; 0x30
    1312:	8f a7       	std	Y+47, r24	; 0x2f
    1314:	3f c0       	rjmp	.+126    	; 0x1394 <Read_Pass+0x210>
	else if (__tmp > 65535)
    1316:	69 a9       	ldd	r22, Y+49	; 0x31
    1318:	7a a9       	ldd	r23, Y+50	; 0x32
    131a:	8b a9       	ldd	r24, Y+51	; 0x33
    131c:	9c a9       	ldd	r25, Y+52	; 0x34
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	3f ef       	ldi	r19, 0xFF	; 255
    1322:	4f e7       	ldi	r20, 0x7F	; 127
    1324:	57 e4       	ldi	r21, 0x47	; 71
    1326:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    132a:	18 16       	cp	r1, r24
    132c:	4c f5       	brge	.+82     	; 0x1380 <Read_Pass+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132e:	6d a9       	ldd	r22, Y+53	; 0x35
    1330:	7e a9       	ldd	r23, Y+54	; 0x36
    1332:	8f a9       	ldd	r24, Y+55	; 0x37
    1334:	98 ad       	ldd	r25, Y+56	; 0x38
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	40 e2       	ldi	r20, 0x20	; 32
    133c:	51 e4       	ldi	r21, 0x41	; 65
    133e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	bc 01       	movw	r22, r24
    1348:	cd 01       	movw	r24, r26
    134a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	98 ab       	std	Y+48, r25	; 0x30
    1354:	8f a7       	std	Y+47, r24	; 0x2f
    1356:	0f c0       	rjmp	.+30     	; 0x1376 <Read_Pass+0x1f2>
    1358:	89 e1       	ldi	r24, 0x19	; 25
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	9e a7       	std	Y+46, r25	; 0x2e
    135e:	8d a7       	std	Y+45, r24	; 0x2d
    1360:	8d a5       	ldd	r24, Y+45	; 0x2d
    1362:	9e a5       	ldd	r25, Y+46	; 0x2e
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <Read_Pass+0x1e0>
    1368:	9e a7       	std	Y+46, r25	; 0x2e
    136a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136c:	8f a5       	ldd	r24, Y+47	; 0x2f
    136e:	98 a9       	ldd	r25, Y+48	; 0x30
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	98 ab       	std	Y+48, r25	; 0x30
    1374:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1376:	8f a5       	ldd	r24, Y+47	; 0x2f
    1378:	98 a9       	ldd	r25, Y+48	; 0x30
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	69 f7       	brne	.-38     	; 0x1358 <Read_Pass+0x1d4>
    137e:	14 c0       	rjmp	.+40     	; 0x13a8 <Read_Pass+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1380:	69 a9       	ldd	r22, Y+49	; 0x31
    1382:	7a a9       	ldd	r23, Y+50	; 0x32
    1384:	8b a9       	ldd	r24, Y+51	; 0x33
    1386:	9c a9       	ldd	r25, Y+52	; 0x34
    1388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	98 ab       	std	Y+48, r25	; 0x30
    1392:	8f a7       	std	Y+47, r24	; 0x2f
    1394:	8f a5       	ldd	r24, Y+47	; 0x2f
    1396:	98 a9       	ldd	r25, Y+48	; 0x30
    1398:	9c a7       	std	Y+44, r25	; 0x2c
    139a:	8b a7       	std	Y+43, r24	; 0x2b
    139c:	8b a5       	ldd	r24, Y+43	; 0x2b
    139e:	9c a5       	ldd	r25, Y+44	; 0x2c
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <Read_Pass+0x21c>
    13a4:	9c a7       	std	Y+44, r25	; 0x2c
    13a6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms (10);
	EEPROM_readByte (0x0313,&p2[2]);
    13a8:	27 eb       	ldi	r18, 0xB7	; 183
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	83 e1       	ldi	r24, 0x13	; 19
    13ae:	93 e0       	ldi	r25, 0x03	; 3
    13b0:	b9 01       	movw	r22, r18
    13b2:	0e 94 02 10 	call	0x2004	; 0x2004 <EEPROM_readByte>
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	a0 e2       	ldi	r26, 0x20	; 32
    13bc:	b1 e4       	ldi	r27, 0x41	; 65
    13be:	8f a3       	std	Y+39, r24	; 0x27
    13c0:	98 a7       	std	Y+40, r25	; 0x28
    13c2:	a9 a7       	std	Y+41, r26	; 0x29
    13c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c6:	6f a1       	ldd	r22, Y+39	; 0x27
    13c8:	78 a5       	ldd	r23, Y+40	; 0x28
    13ca:	89 a5       	ldd	r24, Y+41	; 0x29
    13cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	4a e7       	ldi	r20, 0x7A	; 122
    13d4:	53 e4       	ldi	r21, 0x43	; 67
    13d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	8b a3       	std	Y+35, r24	; 0x23
    13e0:	9c a3       	std	Y+36, r25	; 0x24
    13e2:	ad a3       	std	Y+37, r26	; 0x25
    13e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13e6:	6b a1       	ldd	r22, Y+35	; 0x23
    13e8:	7c a1       	ldd	r23, Y+36	; 0x24
    13ea:	8d a1       	ldd	r24, Y+37	; 0x25
    13ec:	9e a1       	ldd	r25, Y+38	; 0x26
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	40 e8       	ldi	r20, 0x80	; 128
    13f4:	5f e3       	ldi	r21, 0x3F	; 63
    13f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13fa:	88 23       	and	r24, r24
    13fc:	2c f4       	brge	.+10     	; 0x1408 <Read_Pass+0x284>
		__ticks = 1;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	9a a3       	std	Y+34, r25	; 0x22
    1404:	89 a3       	std	Y+33, r24	; 0x21
    1406:	3f c0       	rjmp	.+126    	; 0x1486 <Read_Pass+0x302>
	else if (__tmp > 65535)
    1408:	6b a1       	ldd	r22, Y+35	; 0x23
    140a:	7c a1       	ldd	r23, Y+36	; 0x24
    140c:	8d a1       	ldd	r24, Y+37	; 0x25
    140e:	9e a1       	ldd	r25, Y+38	; 0x26
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	3f ef       	ldi	r19, 0xFF	; 255
    1414:	4f e7       	ldi	r20, 0x7F	; 127
    1416:	57 e4       	ldi	r21, 0x47	; 71
    1418:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    141c:	18 16       	cp	r1, r24
    141e:	4c f5       	brge	.+82     	; 0x1472 <Read_Pass+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1420:	6f a1       	ldd	r22, Y+39	; 0x27
    1422:	78 a5       	ldd	r23, Y+40	; 0x28
    1424:	89 a5       	ldd	r24, Y+41	; 0x29
    1426:	9a a5       	ldd	r25, Y+42	; 0x2a
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e2       	ldi	r20, 0x20	; 32
    142e:	51 e4       	ldi	r21, 0x41	; 65
    1430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	bc 01       	movw	r22, r24
    143a:	cd 01       	movw	r24, r26
    143c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	9a a3       	std	Y+34, r25	; 0x22
    1446:	89 a3       	std	Y+33, r24	; 0x21
    1448:	0f c0       	rjmp	.+30     	; 0x1468 <Read_Pass+0x2e4>
    144a:	89 e1       	ldi	r24, 0x19	; 25
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	98 a3       	std	Y+32, r25	; 0x20
    1450:	8f 8f       	std	Y+31, r24	; 0x1f
    1452:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1454:	98 a1       	ldd	r25, Y+32	; 0x20
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <Read_Pass+0x2d2>
    145a:	98 a3       	std	Y+32, r25	; 0x20
    145c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145e:	89 a1       	ldd	r24, Y+33	; 0x21
    1460:	9a a1       	ldd	r25, Y+34	; 0x22
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	9a a3       	std	Y+34, r25	; 0x22
    1466:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1468:	89 a1       	ldd	r24, Y+33	; 0x21
    146a:	9a a1       	ldd	r25, Y+34	; 0x22
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	69 f7       	brne	.-38     	; 0x144a <Read_Pass+0x2c6>
    1470:	14 c0       	rjmp	.+40     	; 0x149a <Read_Pass+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1472:	6b a1       	ldd	r22, Y+35	; 0x23
    1474:	7c a1       	ldd	r23, Y+36	; 0x24
    1476:	8d a1       	ldd	r24, Y+37	; 0x25
    1478:	9e a1       	ldd	r25, Y+38	; 0x26
    147a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	9a a3       	std	Y+34, r25	; 0x22
    1484:	89 a3       	std	Y+33, r24	; 0x21
    1486:	89 a1       	ldd	r24, Y+33	; 0x21
    1488:	9a a1       	ldd	r25, Y+34	; 0x22
    148a:	9e 8f       	std	Y+30, r25	; 0x1e
    148c:	8d 8f       	std	Y+29, r24	; 0x1d
    148e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1490:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	f1 f7       	brne	.-4      	; 0x1492 <Read_Pass+0x30e>
    1496:	9e 8f       	std	Y+30, r25	; 0x1e
    1498:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms (10);
	EEPROM_readByte (0x0314,&p2[3]);
    149a:	28 eb       	ldi	r18, 0xB8	; 184
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	84 e1       	ldi	r24, 0x14	; 20
    14a0:	93 e0       	ldi	r25, 0x03	; 3
    14a2:	b9 01       	movw	r22, r18
    14a4:	0e 94 02 10 	call	0x2004	; 0x2004 <EEPROM_readByte>
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	a0 e2       	ldi	r26, 0x20	; 32
    14ae:	b1 e4       	ldi	r27, 0x41	; 65
    14b0:	89 8f       	std	Y+25, r24	; 0x19
    14b2:	9a 8f       	std	Y+26, r25	; 0x1a
    14b4:	ab 8f       	std	Y+27, r26	; 0x1b
    14b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b8:	69 8d       	ldd	r22, Y+25	; 0x19
    14ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	4a e7       	ldi	r20, 0x7A	; 122
    14c6:	53 e4       	ldi	r21, 0x43	; 67
    14c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	8d 8b       	std	Y+21, r24	; 0x15
    14d2:	9e 8b       	std	Y+22, r25	; 0x16
    14d4:	af 8b       	std	Y+23, r26	; 0x17
    14d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14d8:	6d 89       	ldd	r22, Y+21	; 0x15
    14da:	7e 89       	ldd	r23, Y+22	; 0x16
    14dc:	8f 89       	ldd	r24, Y+23	; 0x17
    14de:	98 8d       	ldd	r25, Y+24	; 0x18
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e8       	ldi	r20, 0x80	; 128
    14e6:	5f e3       	ldi	r21, 0x3F	; 63
    14e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ec:	88 23       	and	r24, r24
    14ee:	2c f4       	brge	.+10     	; 0x14fa <Read_Pass+0x376>
		__ticks = 1;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	9c 8b       	std	Y+20, r25	; 0x14
    14f6:	8b 8b       	std	Y+19, r24	; 0x13
    14f8:	3f c0       	rjmp	.+126    	; 0x1578 <Read_Pass+0x3f4>
	else if (__tmp > 65535)
    14fa:	6d 89       	ldd	r22, Y+21	; 0x15
    14fc:	7e 89       	ldd	r23, Y+22	; 0x16
    14fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1500:	98 8d       	ldd	r25, Y+24	; 0x18
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	3f ef       	ldi	r19, 0xFF	; 255
    1506:	4f e7       	ldi	r20, 0x7F	; 127
    1508:	57 e4       	ldi	r21, 0x47	; 71
    150a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    150e:	18 16       	cp	r1, r24
    1510:	4c f5       	brge	.+82     	; 0x1564 <Read_Pass+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1512:	69 8d       	ldd	r22, Y+25	; 0x19
    1514:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1516:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1518:	9c 8d       	ldd	r25, Y+28	; 0x1c
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e2       	ldi	r20, 0x20	; 32
    1520:	51 e4       	ldi	r21, 0x41	; 65
    1522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	bc 01       	movw	r22, r24
    152c:	cd 01       	movw	r24, r26
    152e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	9c 8b       	std	Y+20, r25	; 0x14
    1538:	8b 8b       	std	Y+19, r24	; 0x13
    153a:	0f c0       	rjmp	.+30     	; 0x155a <Read_Pass+0x3d6>
    153c:	89 e1       	ldi	r24, 0x19	; 25
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	9a 8b       	std	Y+18, r25	; 0x12
    1542:	89 8b       	std	Y+17, r24	; 0x11
    1544:	89 89       	ldd	r24, Y+17	; 0x11
    1546:	9a 89       	ldd	r25, Y+18	; 0x12
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	f1 f7       	brne	.-4      	; 0x1548 <Read_Pass+0x3c4>
    154c:	9a 8b       	std	Y+18, r25	; 0x12
    154e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1550:	8b 89       	ldd	r24, Y+19	; 0x13
    1552:	9c 89       	ldd	r25, Y+20	; 0x14
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	9c 8b       	std	Y+20, r25	; 0x14
    1558:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155a:	8b 89       	ldd	r24, Y+19	; 0x13
    155c:	9c 89       	ldd	r25, Y+20	; 0x14
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	69 f7       	brne	.-38     	; 0x153c <Read_Pass+0x3b8>
    1562:	14 c0       	rjmp	.+40     	; 0x158c <Read_Pass+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1564:	6d 89       	ldd	r22, Y+21	; 0x15
    1566:	7e 89       	ldd	r23, Y+22	; 0x16
    1568:	8f 89       	ldd	r24, Y+23	; 0x17
    156a:	98 8d       	ldd	r25, Y+24	; 0x18
    156c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	9c 8b       	std	Y+20, r25	; 0x14
    1576:	8b 8b       	std	Y+19, r24	; 0x13
    1578:	8b 89       	ldd	r24, Y+19	; 0x13
    157a:	9c 89       	ldd	r25, Y+20	; 0x14
    157c:	98 8b       	std	Y+16, r25	; 0x10
    157e:	8f 87       	std	Y+15, r24	; 0x0f
    1580:	8f 85       	ldd	r24, Y+15	; 0x0f
    1582:	98 89       	ldd	r25, Y+16	; 0x10
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	f1 f7       	brne	.-4      	; 0x1584 <Read_Pass+0x400>
    1588:	98 8b       	std	Y+16, r25	; 0x10
    158a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (10);
	EEPROM_readByte (0x0315,&p2[4]);
    158c:	29 eb       	ldi	r18, 0xB9	; 185
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	85 e1       	ldi	r24, 0x15	; 21
    1592:	93 e0       	ldi	r25, 0x03	; 3
    1594:	b9 01       	movw	r22, r18
    1596:	0e 94 02 10 	call	0x2004	; 0x2004 <EEPROM_readByte>
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	a0 e2       	ldi	r26, 0x20	; 32
    15a0:	b1 e4       	ldi	r27, 0x41	; 65
    15a2:	8b 87       	std	Y+11, r24	; 0x0b
    15a4:	9c 87       	std	Y+12, r25	; 0x0c
    15a6:	ad 87       	std	Y+13, r26	; 0x0d
    15a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	4a e7       	ldi	r20, 0x7A	; 122
    15b8:	53 e4       	ldi	r21, 0x43	; 67
    15ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	8f 83       	std	Y+7, r24	; 0x07
    15c4:	98 87       	std	Y+8, r25	; 0x08
    15c6:	a9 87       	std	Y+9, r26	; 0x09
    15c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15ca:	6f 81       	ldd	r22, Y+7	; 0x07
    15cc:	78 85       	ldd	r23, Y+8	; 0x08
    15ce:	89 85       	ldd	r24, Y+9	; 0x09
    15d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	40 e8       	ldi	r20, 0x80	; 128
    15d8:	5f e3       	ldi	r21, 0x3F	; 63
    15da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15de:	88 23       	and	r24, r24
    15e0:	2c f4       	brge	.+10     	; 0x15ec <Read_Pass+0x468>
		__ticks = 1;
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	9e 83       	std	Y+6, r25	; 0x06
    15e8:	8d 83       	std	Y+5, r24	; 0x05
    15ea:	3f c0       	rjmp	.+126    	; 0x166a <Read_Pass+0x4e6>
	else if (__tmp > 65535)
    15ec:	6f 81       	ldd	r22, Y+7	; 0x07
    15ee:	78 85       	ldd	r23, Y+8	; 0x08
    15f0:	89 85       	ldd	r24, Y+9	; 0x09
    15f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	3f ef       	ldi	r19, 0xFF	; 255
    15f8:	4f e7       	ldi	r20, 0x7F	; 127
    15fa:	57 e4       	ldi	r21, 0x47	; 71
    15fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1600:	18 16       	cp	r1, r24
    1602:	4c f5       	brge	.+82     	; 0x1656 <Read_Pass+0x4d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1604:	6b 85       	ldd	r22, Y+11	; 0x0b
    1606:	7c 85       	ldd	r23, Y+12	; 0x0c
    1608:	8d 85       	ldd	r24, Y+13	; 0x0d
    160a:	9e 85       	ldd	r25, Y+14	; 0x0e
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	40 e2       	ldi	r20, 0x20	; 32
    1612:	51 e4       	ldi	r21, 0x41	; 65
    1614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	bc 01       	movw	r22, r24
    161e:	cd 01       	movw	r24, r26
    1620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	9e 83       	std	Y+6, r25	; 0x06
    162a:	8d 83       	std	Y+5, r24	; 0x05
    162c:	0f c0       	rjmp	.+30     	; 0x164c <Read_Pass+0x4c8>
    162e:	89 e1       	ldi	r24, 0x19	; 25
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	9c 83       	std	Y+4, r25	; 0x04
    1634:	8b 83       	std	Y+3, r24	; 0x03
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	9c 81       	ldd	r25, Y+4	; 0x04
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	f1 f7       	brne	.-4      	; 0x163a <Read_Pass+0x4b6>
    163e:	9c 83       	std	Y+4, r25	; 0x04
    1640:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1642:	8d 81       	ldd	r24, Y+5	; 0x05
    1644:	9e 81       	ldd	r25, Y+6	; 0x06
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	9e 83       	std	Y+6, r25	; 0x06
    164a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    164c:	8d 81       	ldd	r24, Y+5	; 0x05
    164e:	9e 81       	ldd	r25, Y+6	; 0x06
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	69 f7       	brne	.-38     	; 0x162e <Read_Pass+0x4aa>
    1654:	14 c0       	rjmp	.+40     	; 0x167e <Read_Pass+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1656:	6f 81       	ldd	r22, Y+7	; 0x07
    1658:	78 85       	ldd	r23, Y+8	; 0x08
    165a:	89 85       	ldd	r24, Y+9	; 0x09
    165c:	9a 85       	ldd	r25, Y+10	; 0x0a
    165e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	9e 83       	std	Y+6, r25	; 0x06
    1668:	8d 83       	std	Y+5, r24	; 0x05
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	9e 81       	ldd	r25, Y+6	; 0x06
    166e:	9a 83       	std	Y+2, r25	; 0x02
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	9a 81       	ldd	r25, Y+2	; 0x02
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	f1 f7       	brne	.-4      	; 0x1676 <Read_Pass+0x4f2>
    167a:	9a 83       	std	Y+2, r25	; 0x02
    167c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (10);}
    167e:	ca 5b       	subi	r28, 0xBA	; 186
    1680:	df 4f       	sbci	r29, 0xFF	; 255
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	1f 91       	pop	r17
    1692:	0f 91       	pop	r16
    1694:	08 95       	ret

00001696 <Change_Pass>:

void Change_Pass(void){
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	0f 92       	push	r0
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
	//receive the old pass and compare it 3 times , in the last time the buzzer will work
	Receive_Pass();
    16a0:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <Receive_Pass>
	Read_Pass();
    16a4:	0e 94 c2 08 	call	0x1184	; 0x1184 <Read_Pass>
	Check_Pass_Edit1();//time1
    16a8:	0e 94 8a 0b 	call	0x1714	; 0x1714 <Check_Pass_Edit1>
	Check_Pass_Edit1();//time2
    16ac:	0e 94 8a 0b 	call	0x1714	; 0x1714 <Check_Pass_Edit1>

	//Check_Pass function with edit (the last time)
	        uint8 i;
	        for(i=0 ; i<5 ; i++) {
    16b0:	19 82       	std	Y+1, r1	; 0x01
    16b2:	29 c0       	rjmp	.+82     	; 0x1706 <Change_Pass+0x70>
	     	if(p1[i]==p2[i]){
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	fc 01       	movw	r30, r24
    16bc:	e5 54       	subi	r30, 0x45	; 69
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	20 81       	ld	r18, Z
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	88 2f       	mov	r24, r24
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	fc 01       	movw	r30, r24
    16ca:	eb 54       	subi	r30, 0x4B	; 75
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	80 81       	ld	r24, Z
    16d0:	28 17       	cp	r18, r24
    16d2:	71 f4       	brne	.+28     	; 0x16f0 <Change_Pass+0x5a>
			UART_sendByte (READY);/*inform HMI that Control is ready to send pass status*/
    16d4:	80 e1       	ldi	r24, 0x10	; 16
    16d6:	0e 94 95 12 	call	0x252a	; 0x252a <UART_sendByte>
			UART_sendString("Pass Match#");
    16da:	80 e6       	ldi	r24, 0x60	; 96
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendString>
			Receive_Pass();
    16e2:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <Receive_Pass>
			ReReceive_Pass();
    16e6:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <ReReceive_Pass>
			Check_Pass();
    16ea:	0e 94 0a 06 	call	0xc14	; 0xc14 <Check_Pass>
    16ee:	08 c0       	rjmp	.+16     	; 0x1700 <Change_Pass+0x6a>
		}
		    else{
		    UART_sendString("Pass not Match#"); // send the required string to MC2
    16f0:	8c e6       	ldi	r24, 0x6C	; 108
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendString>
		    //buzzer on
		    Buzzer_init();
    16f8:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <Buzzer_init>
		    //return main options
		    Main_Options();
    16fc:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <Main_Options>
	Check_Pass_Edit1();//time1
	Check_Pass_Edit1();//time2

	//Check_Pass function with edit (the last time)
	        uint8 i;
	        for(i=0 ; i<5 ; i++) {
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	8f 5f       	subi	r24, 0xFF	; 255
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	85 30       	cpi	r24, 0x05	; 5
    170a:	a0 f2       	brcs	.-88     	; 0x16b4 <Change_Pass+0x1e>
		    Main_Options();

		}

	}
}
    170c:	0f 90       	pop	r0
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <Check_Pass_Edit1>:

void Check_Pass_Edit1(void){
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	0f 92       	push	r0
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
	       //for option1 check if the old pass is as the written one then change it / if not make the user renter the password
	       uint8 i;
	       for(i=0 ; i<5 ; i++) {
    171e:	19 82       	std	Y+1, r1	; 0x01
    1720:	27 c0       	rjmp	.+78     	; 0x1770 <Check_Pass_Edit1+0x5c>
		    if(p1[i]==p2[i]){
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	fc 01       	movw	r30, r24
    172a:	e5 54       	subi	r30, 0x45	; 69
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	20 81       	ld	r18, Z
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	88 2f       	mov	r24, r24
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	fc 01       	movw	r30, r24
    1738:	eb 54       	subi	r30, 0x4B	; 75
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	80 81       	ld	r24, Z
    173e:	28 17       	cp	r18, r24
    1740:	71 f4       	brne	.+28     	; 0x175e <Check_Pass_Edit1+0x4a>
			UART_sendByte (READY);/*inform HMI that Control is ready to send pass status*/
    1742:	80 e1       	ldi	r24, 0x10	; 16
    1744:	0e 94 95 12 	call	0x252a	; 0x252a <UART_sendByte>
			UART_sendString("Pass Match#"); // send the required string to MC2
    1748:	80 e6       	ldi	r24, 0x60	; 96
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendString>
			Receive_Pass();//receive the new pass
    1750:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <Receive_Pass>
			ReReceive_Pass();//receive the new pass again
    1754:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <ReReceive_Pass>
			Check_Pass();//compare them to save
    1758:	0e 94 0a 06 	call	0xc14	; 0xc14 <Check_Pass>
    175c:	06 c0       	rjmp	.+12     	; 0x176a <Check_Pass_Edit1+0x56>
		}
		else{
			UART_sendString("Pass not Match#"); // send the required string to MC2
    175e:	8c e6       	ldi	r24, 0x6C	; 108
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendString>
			ReReceive_Pass();//receive the old pass again
    1766:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <ReReceive_Pass>
}

void Check_Pass_Edit1(void){
	       //for option1 check if the old pass is as the written one then change it / if not make the user renter the password
	       uint8 i;
	       for(i=0 ; i<5 ; i++) {
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	8f 5f       	subi	r24, 0xFF	; 255
    176e:	89 83       	std	Y+1, r24	; 0x01
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	85 30       	cpi	r24, 0x05	; 5
    1774:	b0 f2       	brcs	.-84     	; 0x1722 <Check_Pass_Edit1+0xe>
			UART_sendString("Pass not Match#"); // send the required string to MC2
			ReReceive_Pass();//receive the old pass again

		}
	}
}
    1776:	0f 90       	pop	r0
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <Check_Pass_Edit2>:
void Check_Pass_Edit2(void){
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	0f 92       	push	r0
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
	    //for option2 if the passwords are the same make the motor work , else make the user enter the password again
	    //Check_Pass with editing
	    uint8 i;
	    for(i=0 ; i<5 ; i++) {
    1788:	19 82       	std	Y+1, r1	; 0x01
    178a:	23 c0       	rjmp	.+70     	; 0x17d2 <Check_Pass_Edit2+0x54>
		if(p1[i]==p2[i]){
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	88 2f       	mov	r24, r24
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	fc 01       	movw	r30, r24
    1794:	e5 54       	subi	r30, 0x45	; 69
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	20 81       	ld	r18, Z
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	88 2f       	mov	r24, r24
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	fc 01       	movw	r30, r24
    17a2:	eb 54       	subi	r30, 0x4B	; 75
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	80 81       	ld	r24, Z
    17a8:	28 17       	cp	r18, r24
    17aa:	51 f4       	brne	.+20     	; 0x17c0 <Check_Pass_Edit2+0x42>
		UART_sendByte (READY);/*inform HMI that Control is ready to send pass status*/
    17ac:	80 e1       	ldi	r24, 0x10	; 16
    17ae:	0e 94 95 12 	call	0x252a	; 0x252a <UART_sendByte>
		UART_sendString("Pass Match#"); // send the required string to MC2
    17b2:	80 e6       	ldi	r24, 0x60	; 96
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendString>
		Motor_Work();//the door open the hold then close
    17ba:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <Motor_Work>
    17be:	06 c0       	rjmp	.+12     	; 0x17cc <Check_Pass_Edit2+0x4e>
		}
		else{
		UART_sendString("Pass not Match#"); // send the required string to HMI
    17c0:	8c e6       	ldi	r24, 0x6C	; 108
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendString>
		ReReceive_Pass();//receive the pass again
    17c8:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <ReReceive_Pass>
}
void Check_Pass_Edit2(void){
	    //for option2 if the passwords are the same make the motor work , else make the user enter the password again
	    //Check_Pass with editing
	    uint8 i;
	    for(i=0 ; i<5 ; i++) {
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	8f 5f       	subi	r24, 0xFF	; 255
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	85 30       	cpi	r24, 0x05	; 5
    17d6:	d0 f2       	brcs	.-76     	; 0x178c <Check_Pass_Edit2+0xe>
		else{
		UART_sendString("Pass not Match#"); // send the required string to HMI
		ReReceive_Pass();//receive the pass again
		}
	}
}
    17d8:	0f 90       	pop	r0
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <Main_Options>:

void Main_Options(void){
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	61 97       	sbiw	r28, 0x11	; 17
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	aa ef       	ldi	r26, 0xFA	; 250
    17fa:	b4 e4       	ldi	r27, 0x44	; 68
    17fc:	8b 87       	std	Y+11, r24	; 0x0b
    17fe:	9c 87       	std	Y+12, r25	; 0x0c
    1800:	ad 87       	std	Y+13, r26	; 0x0d
    1802:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1804:	6b 85       	ldd	r22, Y+11	; 0x0b
    1806:	7c 85       	ldd	r23, Y+12	; 0x0c
    1808:	8d 85       	ldd	r24, Y+13	; 0x0d
    180a:	9e 85       	ldd	r25, Y+14	; 0x0e
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	4a e7       	ldi	r20, 0x7A	; 122
    1812:	53 e4       	ldi	r21, 0x43	; 67
    1814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	8f 83       	std	Y+7, r24	; 0x07
    181e:	98 87       	std	Y+8, r25	; 0x08
    1820:	a9 87       	std	Y+9, r26	; 0x09
    1822:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1824:	6f 81       	ldd	r22, Y+7	; 0x07
    1826:	78 85       	ldd	r23, Y+8	; 0x08
    1828:	89 85       	ldd	r24, Y+9	; 0x09
    182a:	9a 85       	ldd	r25, Y+10	; 0x0a
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e8       	ldi	r20, 0x80	; 128
    1832:	5f e3       	ldi	r21, 0x3F	; 63
    1834:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1838:	88 23       	and	r24, r24
    183a:	2c f4       	brge	.+10     	; 0x1846 <Main_Options+0x66>
		__ticks = 1;
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	9e 83       	std	Y+6, r25	; 0x06
    1842:	8d 83       	std	Y+5, r24	; 0x05
    1844:	3f c0       	rjmp	.+126    	; 0x18c4 <Main_Options+0xe4>
	else if (__tmp > 65535)
    1846:	6f 81       	ldd	r22, Y+7	; 0x07
    1848:	78 85       	ldd	r23, Y+8	; 0x08
    184a:	89 85       	ldd	r24, Y+9	; 0x09
    184c:	9a 85       	ldd	r25, Y+10	; 0x0a
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	3f ef       	ldi	r19, 0xFF	; 255
    1852:	4f e7       	ldi	r20, 0x7F	; 127
    1854:	57 e4       	ldi	r21, 0x47	; 71
    1856:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    185a:	18 16       	cp	r1, r24
    185c:	4c f5       	brge	.+82     	; 0x18b0 <Main_Options+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1860:	7c 85       	ldd	r23, Y+12	; 0x0c
    1862:	8d 85       	ldd	r24, Y+13	; 0x0d
    1864:	9e 85       	ldd	r25, Y+14	; 0x0e
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e2       	ldi	r20, 0x20	; 32
    186c:	51 e4       	ldi	r21, 0x41	; 65
    186e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	bc 01       	movw	r22, r24
    1878:	cd 01       	movw	r24, r26
    187a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	9e 83       	std	Y+6, r25	; 0x06
    1884:	8d 83       	std	Y+5, r24	; 0x05
    1886:	0f c0       	rjmp	.+30     	; 0x18a6 <Main_Options+0xc6>
    1888:	89 e1       	ldi	r24, 0x19	; 25
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	9c 83       	std	Y+4, r25	; 0x04
    188e:	8b 83       	std	Y+3, r24	; 0x03
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <Main_Options+0xb4>
    1898:	9c 83       	std	Y+4, r25	; 0x04
    189a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189c:	8d 81       	ldd	r24, Y+5	; 0x05
    189e:	9e 81       	ldd	r25, Y+6	; 0x06
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	9e 83       	std	Y+6, r25	; 0x06
    18a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a6:	8d 81       	ldd	r24, Y+5	; 0x05
    18a8:	9e 81       	ldd	r25, Y+6	; 0x06
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	69 f7       	brne	.-38     	; 0x1888 <Main_Options+0xa8>
    18ae:	14 c0       	rjmp	.+40     	; 0x18d8 <Main_Options+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b0:	6f 81       	ldd	r22, Y+7	; 0x07
    18b2:	78 85       	ldd	r23, Y+8	; 0x08
    18b4:	89 85       	ldd	r24, Y+9	; 0x09
    18b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	9e 83       	std	Y+6, r25	; 0x06
    18c2:	8d 83       	std	Y+5, r24	; 0x05
    18c4:	8d 81       	ldd	r24, Y+5	; 0x05
    18c6:	9e 81       	ldd	r25, Y+6	; 0x06
    18c8:	9a 83       	std	Y+2, r25	; 0x02
    18ca:	89 83       	std	Y+1, r24	; 0x01
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	9a 81       	ldd	r25, Y+2	; 0x02
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	f1 f7       	brne	.-4      	; 0x18d0 <Main_Options+0xf0>
    18d4:	9a 83       	std	Y+2, r25	; 0x02
    18d6:	89 83       	std	Y+1, r24	; 0x01
	    uint8 option; // 1 for change pass , 2 for open door
	    uint8 i;
	    _delay_ms(2000); // wait until the lcd show the options

	    UART_sendByte (READY);/*inform Control that HMI is ready to send pass*/
    18d8:	80 e1       	ldi	r24, 0x10	; 16
    18da:	0e 94 95 12 	call	0x252a	; 0x252a <UART_sendByte>
	    UART_receiveString (option); //Control receive the option tho take the action
    18de:	89 89       	ldd	r24, Y+17	; 0x11
    18e0:	88 2f       	mov	r24, r24
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <UART_receiveString>

	    if(option==1){//change pass
    18e8:	89 89       	ldd	r24, Y+17	; 0x11
    18ea:	81 30       	cpi	r24, 0x01	; 1
    18ec:	11 f4       	brne	.+4      	; 0x18f2 <Main_Options+0x112>

		Change_Pass();
    18ee:	0e 94 4b 0b 	call	0x1696	; 0x1696 <Change_Pass>
	}
	    if(option==2){//open the door
    18f2:	89 89       	ldd	r24, Y+17	; 0x11
    18f4:	82 30       	cpi	r24, 0x02	; 2
    18f6:	81 f5       	brne	.+96     	; 0x1958 <Main_Options+0x178>
		ReReceive_Pass();//receive pass in p2[5]
    18f8:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <ReReceive_Pass>
		Check_Pass_Edit2();//compare p2[5] to p1[5](in which the pass was written before) if they are the same open ,else rereceive the pass for 3times
    18fc:	0e 94 bf 0b 	call	0x177e	; 0x177e <Check_Pass_Edit2>
		Check_Pass_Edit2();
    1900:	0e 94 bf 0b 	call	0x177e	; 0x177e <Check_Pass_Edit2>

		//Check_Pass with editing
		//the last time the pass isn't correct the buzzer 'll work
		uint8 i;
		for(i=0 ; i<5 ; i++) {
    1904:	1f 86       	std	Y+15, r1	; 0x0f
    1906:	25 c0       	rjmp	.+74     	; 0x1952 <Main_Options+0x172>
		if(p1[i]==p2[i]){
    1908:	8f 85       	ldd	r24, Y+15	; 0x0f
    190a:	88 2f       	mov	r24, r24
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	fc 01       	movw	r30, r24
    1910:	e5 54       	subi	r30, 0x45	; 69
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	20 81       	ld	r18, Z
    1916:	8f 85       	ldd	r24, Y+15	; 0x0f
    1918:	88 2f       	mov	r24, r24
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	fc 01       	movw	r30, r24
    191e:	eb 54       	subi	r30, 0x4B	; 75
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	80 81       	ld	r24, Z
    1924:	28 17       	cp	r18, r24
    1926:	51 f4       	brne	.+20     	; 0x193c <Main_Options+0x15c>
		UART_sendByte (READY);/*inform HMI that Control is ready to send pass status*/
    1928:	80 e1       	ldi	r24, 0x10	; 16
    192a:	0e 94 95 12 	call	0x252a	; 0x252a <UART_sendByte>
		UART_sendString("Pass Match#"); // send the required string to MC2
    192e:	80 e6       	ldi	r24, 0x60	; 96
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendString>
		Motor_Work();
    1936:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <Motor_Work>
    193a:	08 c0       	rjmp	.+16     	; 0x194c <Main_Options+0x16c>
			}
		else{
		UART_sendString("Pass not Match#"); // send the required string to MC2
    193c:	8c e6       	ldi	r24, 0x6C	; 108
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendString>
		// buzzer on
		Buzzer_init();
    1944:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <Buzzer_init>
		//return main options
		Main_Options();
    1948:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <Main_Options>
		Check_Pass_Edit2();

		//Check_Pass with editing
		//the last time the pass isn't correct the buzzer 'll work
		uint8 i;
		for(i=0 ; i<5 ; i++) {
    194c:	8f 85       	ldd	r24, Y+15	; 0x0f
    194e:	8f 5f       	subi	r24, 0xFF	; 255
    1950:	8f 87       	std	Y+15, r24	; 0x0f
    1952:	8f 85       	ldd	r24, Y+15	; 0x0f
    1954:	85 30       	cpi	r24, 0x05	; 5
    1956:	c0 f2       	brcs	.-80     	; 0x1908 <Main_Options+0x128>

			}
		}

	}
}
    1958:	61 96       	adiw	r28, 0x11	; 17
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <Timer0_count>:

/*function to count seconds*/
void Timer0_count(){
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
	/* Description :
	 * For clock = 8Mhz and prescaler F_CPU/1024 every count will take 128 microsecond
	 * so put initial timer counter=0  0 --> 255 (32ms per overflow)
	 * so we need timer to overflow 31 times to get a 1 second
	 */
	g_tick++; // ticks increase until it be 1 sec then second variable 'll be incremented
    1972:	80 91 ae 00 	lds	r24, 0x00AE
    1976:	8f 5f       	subi	r24, 0xFF	; 255
    1978:	80 93 ae 00 	sts	0x00AE, r24
	if (g_tick == NUMBER_OF_OVERFLOWS_PER_SECOND)
    197c:	80 91 ae 00 	lds	r24, 0x00AE
    1980:	80 32       	cpi	r24, 0x20	; 32
    1982:	39 f4       	brne	.+14     	; 0x1992 <Timer0_count+0x28>
		{
			second++;
    1984:	80 91 ba 00 	lds	r24, 0x00BA
    1988:	8f 5f       	subi	r24, 0xFF	; 255
    198a:	80 93 ba 00 	sts	0x00BA, r24
			g_tick = 0; //clear the tick counter again to count a new second
    198e:	10 92 ae 00 	sts	0x00AE, r1
		}
}
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <Timer0_initalize>:

/*function to initialize timer 0 & call the call back function*/
void Timer0_initalize(){
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <Timer0_initalize+0x6>
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <Timer0_initalize+0x8>
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
	/* Create configuration structure for Timer0 driver */
	Timer0_ConfigType Timer0_Config = {F_CPU_1024,NORMAL,0,250}; //prescaler=1024 , Normal mode , initial value for timer=0 , CTC compare value=250
    19a4:	85 e0       	ldi	r24, 0x05	; 5
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	1a 82       	std	Y+2, r1	; 0x02
    19aa:	1b 82       	std	Y+3, r1	; 0x03
    19ac:	8a ef       	ldi	r24, 0xFA	; 250
    19ae:	8c 83       	std	Y+4, r24	; 0x04
	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
    19b0:	af e5       	ldi	r26, 0x5F	; 95
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	ef e5       	ldi	r30, 0x5F	; 95
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	80 68       	ori	r24, 0x80	; 128
    19bc:	8c 93       	st	X, r24
	/*initialize Timer0 driver*/
	Timer0_init(&Timer0_Config);
    19be:	ce 01       	movw	r24, r28
    19c0:	01 96       	adiw	r24, 0x01	; 1
    19c2:	0e 94 63 11 	call	0x22c6	; 0x22c6 <Timer0_init>
	/* Set the Call back function pointer in the Timer0 driver */
	Timer0_setCallBack(Timer0_count);
    19c6:	85 eb       	ldi	r24, 0xB5	; 181
    19c8:	9c e0       	ldi	r25, 0x0C	; 12
    19ca:	0e 94 b9 11 	call	0x2372	; 0x2372 <Timer0_setCallBack>
}
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <Motor_Work>:



void Motor_Work(){
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
	/* configure pin PA0 and PA1 as output pins */
	DDRC |= 0x03;
    19e4:	a4 e3       	ldi	r26, 0x34	; 52
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e4 e3       	ldi	r30, 0x34	; 52
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	83 60       	ori	r24, 0x03	; 3
    19f0:	8c 93       	st	X, r24
	/* Motor is stop at the beginning */
	PORTA &= 0xFC;
    19f2:	ab e3       	ldi	r26, 0x3B	; 59
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	eb e3       	ldi	r30, 0x3B	; 59
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	8c 7f       	andi	r24, 0xFC	; 252
    19fe:	8c 93       	st	X, r24
	Timer0_initalize();
    1a00:	0e 94 cc 0c 	call	0x1998	; 0x1998 <Timer0_initalize>
    1a04:	16 c0       	rjmp	.+44     	; 0x1a32 <Motor_Work+0x56>
while (second!=15){
	// Rotate the motor --> clock wise
	PORTA &= (~(1<<PA0));
    1a06:	ab e3       	ldi	r26, 0x3B	; 59
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	eb e3       	ldi	r30, 0x3B	; 59
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	8e 7f       	andi	r24, 0xFE	; 254
    1a12:	8c 93       	st	X, r24
	PORTA |= (1<<PA1);
    1a14:	ab e3       	ldi	r26, 0x3B	; 59
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	eb e3       	ldi	r30, 0x3B	; 59
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	82 60       	ori	r24, 0x02	; 2
    1a20:	8c 93       	st	X, r24
	while ((UART_recieveByte ()) != READY);//wait until HMI is ready to receive
    1a22:	0e 94 ac 12 	call	0x2558	; 0x2558 <UART_recieveByte>
    1a26:	80 31       	cpi	r24, 0x10	; 16
    1a28:	e1 f7       	brne	.-8      	; 0x1a22 <Motor_Work+0x46>
	UART_sendString("Door's unlocking");
    1a2a:	8c e7       	ldi	r24, 0x7C	; 124
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendString>
	/* configure pin PA0 and PA1 as output pins */
	DDRC |= 0x03;
	/* Motor is stop at the beginning */
	PORTA &= 0xFC;
	Timer0_initalize();
while (second!=15){
    1a32:	80 91 ba 00 	lds	r24, 0x00BA
    1a36:	8f 30       	cpi	r24, 0x0F	; 15
    1a38:	31 f7       	brne	.-52     	; 0x1a06 <Motor_Work+0x2a>
	PORTA &= (~(1<<PA0));
	PORTA |= (1<<PA1);
	while ((UART_recieveByte ()) != READY);//wait until HMI is ready to receive
	UART_sendString("Door's unlocking");
}
    second=0;
    1a3a:	10 92 ba 00 	sts	0x00BA, r1
    1a3e:	0e c0       	rjmp	.+28     	; 0x1a5c <Motor_Work+0x80>
    while (second!=3){// Stop the motor for 3 seconds
	PORTA &= (~(1<<PA0));
    1a40:	ab e3       	ldi	r26, 0x3B	; 59
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	eb e3       	ldi	r30, 0x3B	; 59
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	8e 7f       	andi	r24, 0xFE	; 254
    1a4c:	8c 93       	st	X, r24
	PORTA &= (~(1<<PA1));}//hold the motor
    1a4e:	ab e3       	ldi	r26, 0x3B	; 59
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	eb e3       	ldi	r30, 0x3B	; 59
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	8d 7f       	andi	r24, 0xFD	; 253
    1a5a:	8c 93       	st	X, r24
	PORTA |= (1<<PA1);
	while ((UART_recieveByte ()) != READY);//wait until HMI is ready to receive
	UART_sendString("Door's unlocking");
}
    second=0;
    while (second!=3){// Stop the motor for 3 seconds
    1a5c:	80 91 ba 00 	lds	r24, 0x00BA
    1a60:	83 30       	cpi	r24, 0x03	; 3
    1a62:	71 f7       	brne	.-36     	; 0x1a40 <Motor_Work+0x64>
	PORTA &= (~(1<<PA0));
	PORTA &= (~(1<<PA1));}//hold the motor
    second=0;
    1a64:	10 92 ba 00 	sts	0x00BA, r1
    1a68:	16 c0       	rjmp	.+44     	; 0x1a96 <Motor_Work+0xba>

while(second!=15){
	// Rotate the motor --> anti-clock wise
	PORTA |= (1<<PA0);
    1a6a:	ab e3       	ldi	r26, 0x3B	; 59
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	eb e3       	ldi	r30, 0x3B	; 59
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	81 60       	ori	r24, 0x01	; 1
    1a76:	8c 93       	st	X, r24
	PORTA &= (~(1<<PA1));
    1a78:	ab e3       	ldi	r26, 0x3B	; 59
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	eb e3       	ldi	r30, 0x3B	; 59
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	8d 7f       	andi	r24, 0xFD	; 253
    1a84:	8c 93       	st	X, r24
	while ((UART_recieveByte ()) != READY);
    1a86:	0e 94 ac 12 	call	0x2558	; 0x2558 <UART_recieveByte>
    1a8a:	80 31       	cpi	r24, 0x10	; 16
    1a8c:	e1 f7       	brne	.-8      	; 0x1a86 <Motor_Work+0xaa>
	UART_sendString("Door's locking");
    1a8e:	8d e8       	ldi	r24, 0x8D	; 141
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendString>
    while (second!=3){// Stop the motor for 3 seconds
	PORTA &= (~(1<<PA0));
	PORTA &= (~(1<<PA1));}//hold the motor
    second=0;

while(second!=15){
    1a96:	80 91 ba 00 	lds	r24, 0x00BA
    1a9a:	8f 30       	cpi	r24, 0x0F	; 15
    1a9c:	31 f7       	brne	.-52     	; 0x1a6a <Motor_Work+0x8e>
	PORTA |= (1<<PA0);
	PORTA &= (~(1<<PA1));
	while ((UART_recieveByte ()) != READY);
	UART_sendString("Door's locking");
}
second=0;
    1a9e:	10 92 ba 00 	sts	0x00BA, r1
// Stop the motor after the door is closed
	PORTA &= (~(1<<PA0));
    1aa2:	ab e3       	ldi	r26, 0x3B	; 59
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	eb e3       	ldi	r30, 0x3B	; 59
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	8e 7f       	andi	r24, 0xFE	; 254
    1aae:	8c 93       	st	X, r24
	PORTA &= (~(1<<PA1));
    1ab0:	ab e3       	ldi	r26, 0x3B	; 59
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	eb e3       	ldi	r30, 0x3B	; 59
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	8d 7f       	andi	r24, 0xFD	; 253
    1abc:	8c 93       	st	X, r24
}
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <Buzzer_init>:

void Buzzer_init(void){
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	2e 97       	sbiw	r28, 0x0e	; 14
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
	/* configure pin PB0 as output pin */
	DDRB |= 0x01;
    1ad8:	a7 e3       	ldi	r26, 0x37	; 55
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e7 e3       	ldi	r30, 0x37	; 55
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	81 60       	ori	r24, 0x01	; 1
    1ae4:	8c 93       	st	X, r24
	PORTB |= (1<<PB0); //buzzer start
    1ae6:	a8 e3       	ldi	r26, 0x38	; 56
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e8 e3       	ldi	r30, 0x38	; 56
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	81 60       	ori	r24, 0x01	; 1
    1af2:	8c 93       	st	X, r24
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	90 e6       	ldi	r25, 0x60	; 96
    1af8:	aa e6       	ldi	r26, 0x6A	; 106
    1afa:	b7 e4       	ldi	r27, 0x47	; 71
    1afc:	8b 87       	std	Y+11, r24	; 0x0b
    1afe:	9c 87       	std	Y+12, r25	; 0x0c
    1b00:	ad 87       	std	Y+13, r26	; 0x0d
    1b02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	4a e7       	ldi	r20, 0x7A	; 122
    1b12:	53 e4       	ldi	r21, 0x43	; 67
    1b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	8f 83       	std	Y+7, r24	; 0x07
    1b1e:	98 87       	std	Y+8, r25	; 0x08
    1b20:	a9 87       	std	Y+9, r26	; 0x09
    1b22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b24:	6f 81       	ldd	r22, Y+7	; 0x07
    1b26:	78 85       	ldd	r23, Y+8	; 0x08
    1b28:	89 85       	ldd	r24, Y+9	; 0x09
    1b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e8       	ldi	r20, 0x80	; 128
    1b32:	5f e3       	ldi	r21, 0x3F	; 63
    1b34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b38:	88 23       	and	r24, r24
    1b3a:	2c f4       	brge	.+10     	; 0x1b46 <Buzzer_init+0x82>
		__ticks = 1;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	9e 83       	std	Y+6, r25	; 0x06
    1b42:	8d 83       	std	Y+5, r24	; 0x05
    1b44:	3f c0       	rjmp	.+126    	; 0x1bc4 <Buzzer_init+0x100>
	else if (__tmp > 65535)
    1b46:	6f 81       	ldd	r22, Y+7	; 0x07
    1b48:	78 85       	ldd	r23, Y+8	; 0x08
    1b4a:	89 85       	ldd	r24, Y+9	; 0x09
    1b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	3f ef       	ldi	r19, 0xFF	; 255
    1b52:	4f e7       	ldi	r20, 0x7F	; 127
    1b54:	57 e4       	ldi	r21, 0x47	; 71
    1b56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b5a:	18 16       	cp	r1, r24
    1b5c:	4c f5       	brge	.+82     	; 0x1bb0 <Buzzer_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	40 e2       	ldi	r20, 0x20	; 32
    1b6c:	51 e4       	ldi	r21, 0x41	; 65
    1b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	bc 01       	movw	r22, r24
    1b78:	cd 01       	movw	r24, r26
    1b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	9e 83       	std	Y+6, r25	; 0x06
    1b84:	8d 83       	std	Y+5, r24	; 0x05
    1b86:	0f c0       	rjmp	.+30     	; 0x1ba6 <Buzzer_init+0xe2>
    1b88:	89 e1       	ldi	r24, 0x19	; 25
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	9c 83       	std	Y+4, r25	; 0x04
    1b8e:	8b 83       	std	Y+3, r24	; 0x03
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <Buzzer_init+0xd0>
    1b98:	9c 83       	std	Y+4, r25	; 0x04
    1b9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	9e 83       	std	Y+6, r25	; 0x06
    1ba4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	69 f7       	brne	.-38     	; 0x1b88 <Buzzer_init+0xc4>
    1bae:	14 c0       	rjmp	.+40     	; 0x1bd8 <Buzzer_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb2:	78 85       	ldd	r23, Y+8	; 0x08
    1bb4:	89 85       	ldd	r24, Y+9	; 0x09
    1bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	9e 83       	std	Y+6, r25	; 0x06
    1bc2:	8d 83       	std	Y+5, r24	; 0x05
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc8:	9a 83       	std	Y+2, r25	; 0x02
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	f1 f7       	brne	.-4      	; 0x1bd0 <Buzzer_init+0x10c>
    1bd4:	9a 83       	std	Y+2, r25	; 0x02
    1bd6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(60000); // delay for 1min
	PORTB &= (~(1<<PB0)); //buzzer stop
    1bd8:	a8 e3       	ldi	r26, 0x38	; 56
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e8 e3       	ldi	r30, 0x38	; 56
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	8e 7f       	andi	r24, 0xFE	; 254
    1be4:	8c 93       	st	X, r24
}
    1be6:	2e 96       	adiw	r28, 0x0e	; 14
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <main>:




int main(void){
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	ab 97       	sbiw	r28, 0x2b	; 43
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61

	//initialization
	APP_init();
    1c0c:	0e 94 a3 05 	call	0xb46	; 0xb46 <APP_init>


	//that for the app to start from main options when the power in off
	while ((UART_recieveByte ()) != READY);//check if HMI ready to receive
    1c10:	0e 94 ac 12 	call	0x2558	; 0x2558 <UART_recieveByte>
    1c14:	80 31       	cpi	r24, 0x10	; 16
    1c16:	e1 f7       	brne	.-8      	; 0x1c10 <main+0x18>
	{
     Read_Pass();// read the pass from memory
    1c18:	0e 94 c2 08 	call	0x1184	; 0x1184 <Read_Pass>
     uint8 i;
	 for(i=0 ; i<5 ; i++) {
    1c1c:	1b a6       	std	Y+43, r1	; 0x2b
    1c1e:	73 c1       	rjmp	.+742    	; 0x1f06 <main+0x30e>
	 if(p1[i]!=p2[i]){ // if the pass != the pass in p1[5] (no data saved in memory)
    1c20:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c22:	88 2f       	mov	r24, r24
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	fc 01       	movw	r30, r24
    1c28:	e5 54       	subi	r30, 0x45	; 69
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	20 81       	ld	r18, Z
    1c2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c30:	88 2f       	mov	r24, r24
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	fc 01       	movw	r30, r24
    1c36:	eb 54       	subi	r30, 0x4B	; 75
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	80 81       	ld	r24, Z
    1c3c:	28 17       	cp	r18, r24
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <main+0x4a>
    1c40:	5f c1       	rjmp	.+702    	; 0x1f00 <main+0x308>
	 //create new pass by receiving it from HMI twice the check it
	 UART_sendByte (READY);/*inform HMI that Control is ready to send pass status*/
    1c42:	80 e1       	ldi	r24, 0x10	; 16
    1c44:	0e 94 95 12 	call	0x252a	; 0x252a <UART_sendByte>
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	aa ef       	ldi	r26, 0xFA	; 250
    1c4e:	b4 e4       	ldi	r27, 0x44	; 68
    1c50:	8f a3       	std	Y+39, r24	; 0x27
    1c52:	98 a7       	std	Y+40, r25	; 0x28
    1c54:	a9 a7       	std	Y+41, r26	; 0x29
    1c56:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c58:	6f a1       	ldd	r22, Y+39	; 0x27
    1c5a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c5c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	4a e7       	ldi	r20, 0x7A	; 122
    1c66:	53 e4       	ldi	r21, 0x43	; 67
    1c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	8b a3       	std	Y+35, r24	; 0x23
    1c72:	9c a3       	std	Y+36, r25	; 0x24
    1c74:	ad a3       	std	Y+37, r26	; 0x25
    1c76:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c78:	6b a1       	ldd	r22, Y+35	; 0x23
    1c7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e8       	ldi	r20, 0x80	; 128
    1c86:	5f e3       	ldi	r21, 0x3F	; 63
    1c88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c8c:	88 23       	and	r24, r24
    1c8e:	2c f4       	brge	.+10     	; 0x1c9a <main+0xa2>
		__ticks = 1;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	9a a3       	std	Y+34, r25	; 0x22
    1c96:	89 a3       	std	Y+33, r24	; 0x21
    1c98:	3f c0       	rjmp	.+126    	; 0x1d18 <main+0x120>
	else if (__tmp > 65535)
    1c9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1ca0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	3f ef       	ldi	r19, 0xFF	; 255
    1ca6:	4f e7       	ldi	r20, 0x7F	; 127
    1ca8:	57 e4       	ldi	r21, 0x47	; 71
    1caa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cae:	18 16       	cp	r1, r24
    1cb0:	4c f5       	brge	.+82     	; 0x1d04 <main+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb2:	6f a1       	ldd	r22, Y+39	; 0x27
    1cb4:	78 a5       	ldd	r23, Y+40	; 0x28
    1cb6:	89 a5       	ldd	r24, Y+41	; 0x29
    1cb8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e2       	ldi	r20, 0x20	; 32
    1cc0:	51 e4       	ldi	r21, 0x41	; 65
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	bc 01       	movw	r22, r24
    1ccc:	cd 01       	movw	r24, r26
    1cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	9a a3       	std	Y+34, r25	; 0x22
    1cd8:	89 a3       	std	Y+33, r24	; 0x21
    1cda:	0f c0       	rjmp	.+30     	; 0x1cfa <main+0x102>
    1cdc:	89 e1       	ldi	r24, 0x19	; 25
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	98 a3       	std	Y+32, r25	; 0x20
    1ce2:	8f 8f       	std	Y+31, r24	; 0x1f
    1ce4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ce6:	98 a1       	ldd	r25, Y+32	; 0x20
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <main+0xf0>
    1cec:	98 a3       	std	Y+32, r25	; 0x20
    1cee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf0:	89 a1       	ldd	r24, Y+33	; 0x21
    1cf2:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	9a a3       	std	Y+34, r25	; 0x22
    1cf8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfa:	89 a1       	ldd	r24, Y+33	; 0x21
    1cfc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	69 f7       	brne	.-38     	; 0x1cdc <main+0xe4>
    1d02:	14 c0       	rjmp	.+40     	; 0x1d2c <main+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d04:	6b a1       	ldd	r22, Y+35	; 0x23
    1d06:	7c a1       	ldd	r23, Y+36	; 0x24
    1d08:	8d a1       	ldd	r24, Y+37	; 0x25
    1d0a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	9a a3       	std	Y+34, r25	; 0x22
    1d16:	89 a3       	std	Y+33, r24	; 0x21
    1d18:	89 a1       	ldd	r24, Y+33	; 0x21
    1d1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d1c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d1e:	8d 8f       	std	Y+29, r24	; 0x1d
    1d20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <main+0x12c>
    1d28:	9e 8f       	std	Y+30, r25	; 0x1e
    1d2a:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(2000);
	 Receive_Pass();
    1d2c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <Receive_Pass>
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	aa ef       	ldi	r26, 0xFA	; 250
    1d36:	b4 e4       	ldi	r27, 0x44	; 68
    1d38:	89 8f       	std	Y+25, r24	; 0x19
    1d3a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d3c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d3e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d40:	69 8d       	ldd	r22, Y+25	; 0x19
    1d42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	4a e7       	ldi	r20, 0x7A	; 122
    1d4e:	53 e4       	ldi	r21, 0x43	; 67
    1d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	8d 8b       	std	Y+21, r24	; 0x15
    1d5a:	9e 8b       	std	Y+22, r25	; 0x16
    1d5c:	af 8b       	std	Y+23, r26	; 0x17
    1d5e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d60:	6d 89       	ldd	r22, Y+21	; 0x15
    1d62:	7e 89       	ldd	r23, Y+22	; 0x16
    1d64:	8f 89       	ldd	r24, Y+23	; 0x17
    1d66:	98 8d       	ldd	r25, Y+24	; 0x18
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e8       	ldi	r20, 0x80	; 128
    1d6e:	5f e3       	ldi	r21, 0x3F	; 63
    1d70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d74:	88 23       	and	r24, r24
    1d76:	2c f4       	brge	.+10     	; 0x1d82 <main+0x18a>
		__ticks = 1;
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9c 8b       	std	Y+20, r25	; 0x14
    1d7e:	8b 8b       	std	Y+19, r24	; 0x13
    1d80:	3f c0       	rjmp	.+126    	; 0x1e00 <main+0x208>
	else if (__tmp > 65535)
    1d82:	6d 89       	ldd	r22, Y+21	; 0x15
    1d84:	7e 89       	ldd	r23, Y+22	; 0x16
    1d86:	8f 89       	ldd	r24, Y+23	; 0x17
    1d88:	98 8d       	ldd	r25, Y+24	; 0x18
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	3f ef       	ldi	r19, 0xFF	; 255
    1d8e:	4f e7       	ldi	r20, 0x7F	; 127
    1d90:	57 e4       	ldi	r21, 0x47	; 71
    1d92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d96:	18 16       	cp	r1, r24
    1d98:	4c f5       	brge	.+82     	; 0x1dec <main+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e2       	ldi	r20, 0x20	; 32
    1da8:	51 e4       	ldi	r21, 0x41	; 65
    1daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	bc 01       	movw	r22, r24
    1db4:	cd 01       	movw	r24, r26
    1db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9c 8b       	std	Y+20, r25	; 0x14
    1dc0:	8b 8b       	std	Y+19, r24	; 0x13
    1dc2:	0f c0       	rjmp	.+30     	; 0x1de2 <main+0x1ea>
    1dc4:	89 e1       	ldi	r24, 0x19	; 25
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9a 8b       	std	Y+18, r25	; 0x12
    1dca:	89 8b       	std	Y+17, r24	; 0x11
    1dcc:	89 89       	ldd	r24, Y+17	; 0x11
    1dce:	9a 89       	ldd	r25, Y+18	; 0x12
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <main+0x1d8>
    1dd4:	9a 8b       	std	Y+18, r25	; 0x12
    1dd6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dda:	9c 89       	ldd	r25, Y+20	; 0x14
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	9c 8b       	std	Y+20, r25	; 0x14
    1de0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de2:	8b 89       	ldd	r24, Y+19	; 0x13
    1de4:	9c 89       	ldd	r25, Y+20	; 0x14
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	69 f7       	brne	.-38     	; 0x1dc4 <main+0x1cc>
    1dea:	14 c0       	rjmp	.+40     	; 0x1e14 <main+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dec:	6d 89       	ldd	r22, Y+21	; 0x15
    1dee:	7e 89       	ldd	r23, Y+22	; 0x16
    1df0:	8f 89       	ldd	r24, Y+23	; 0x17
    1df2:	98 8d       	ldd	r25, Y+24	; 0x18
    1df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	9c 8b       	std	Y+20, r25	; 0x14
    1dfe:	8b 8b       	std	Y+19, r24	; 0x13
    1e00:	8b 89       	ldd	r24, Y+19	; 0x13
    1e02:	9c 89       	ldd	r25, Y+20	; 0x14
    1e04:	98 8b       	std	Y+16, r25	; 0x10
    1e06:	8f 87       	std	Y+15, r24	; 0x0f
    1e08:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e0a:	98 89       	ldd	r25, Y+16	; 0x10
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <main+0x214>
    1e10:	98 8b       	std	Y+16, r25	; 0x10
    1e12:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(2000);
	 ReReceive_Pass();
    1e14:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <ReReceive_Pass>
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	aa ef       	ldi	r26, 0xFA	; 250
    1e1e:	b4 e4       	ldi	r27, 0x44	; 68
    1e20:	8b 87       	std	Y+11, r24	; 0x0b
    1e22:	9c 87       	std	Y+12, r25	; 0x0c
    1e24:	ad 87       	std	Y+13, r26	; 0x0d
    1e26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	4a e7       	ldi	r20, 0x7A	; 122
    1e36:	53 e4       	ldi	r21, 0x43	; 67
    1e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	8f 83       	std	Y+7, r24	; 0x07
    1e42:	98 87       	std	Y+8, r25	; 0x08
    1e44:	a9 87       	std	Y+9, r26	; 0x09
    1e46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e48:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4a:	78 85       	ldd	r23, Y+8	; 0x08
    1e4c:	89 85       	ldd	r24, Y+9	; 0x09
    1e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e8       	ldi	r20, 0x80	; 128
    1e56:	5f e3       	ldi	r21, 0x3F	; 63
    1e58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e5c:	88 23       	and	r24, r24
    1e5e:	2c f4       	brge	.+10     	; 0x1e6a <main+0x272>
		__ticks = 1;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9e 83       	std	Y+6, r25	; 0x06
    1e66:	8d 83       	std	Y+5, r24	; 0x05
    1e68:	3f c0       	rjmp	.+126    	; 0x1ee8 <main+0x2f0>
	else if (__tmp > 65535)
    1e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6c:	78 85       	ldd	r23, Y+8	; 0x08
    1e6e:	89 85       	ldd	r24, Y+9	; 0x09
    1e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	3f ef       	ldi	r19, 0xFF	; 255
    1e76:	4f e7       	ldi	r20, 0x7F	; 127
    1e78:	57 e4       	ldi	r21, 0x47	; 71
    1e7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e7e:	18 16       	cp	r1, r24
    1e80:	4c f5       	brge	.+82     	; 0x1ed4 <main+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e2       	ldi	r20, 0x20	; 32
    1e90:	51 e4       	ldi	r21, 0x41	; 65
    1e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	bc 01       	movw	r22, r24
    1e9c:	cd 01       	movw	r24, r26
    1e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	9e 83       	std	Y+6, r25	; 0x06
    1ea8:	8d 83       	std	Y+5, r24	; 0x05
    1eaa:	0f c0       	rjmp	.+30     	; 0x1eca <main+0x2d2>
    1eac:	89 e1       	ldi	r24, 0x19	; 25
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9c 83       	std	Y+4, r25	; 0x04
    1eb2:	8b 83       	std	Y+3, r24	; 0x03
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <main+0x2c0>
    1ebc:	9c 83       	std	Y+4, r25	; 0x04
    1ebe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	69 f7       	brne	.-38     	; 0x1eac <main+0x2b4>
    1ed2:	14 c0       	rjmp	.+40     	; 0x1efc <main+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed6:	78 85       	ldd	r23, Y+8	; 0x08
    1ed8:	89 85       	ldd	r24, Y+9	; 0x09
    1eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9e 83       	std	Y+6, r25	; 0x06
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
    1ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eea:	9e 81       	ldd	r25, Y+6	; 0x06
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <main+0x2fc>
    1ef8:	9a 83       	std	Y+2, r25	; 0x02
    1efa:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2000);
	 Check_Pass();
    1efc:	0e 94 0a 06 	call	0xc14	; 0xc14 <Check_Pass>
	//that for the app to start from main options when the power in off
	while ((UART_recieveByte ()) != READY);//check if HMI ready to receive
	{
     Read_Pass();// read the pass from memory
     uint8 i;
	 for(i=0 ; i<5 ; i++) {
    1f00:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f02:	8f 5f       	subi	r24, 0xFF	; 255
    1f04:	8b a7       	std	Y+43, r24	; 0x2b
    1f06:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f08:	85 30       	cpi	r24, 0x05	; 5
    1f0a:	08 f4       	brcc	.+2      	; 0x1f0e <main+0x316>
    1f0c:	89 ce       	rjmp	.-750    	; 0x1c20 <main+0x28>
	}
}


	while(1){
		Main_Options();
    1f0e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <Main_Options>
    1f12:	fd cf       	rjmp	.-6      	; 0x1f0e <main+0x316>

00001f14 <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{   I2C_ConfigType I2C_Config={two,one,0b00000010}; //division factor=2 ,prescaler=1,slave address=0b00000010
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	28 97       	sbiw	r28, 0x08	; 8
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	ce 01       	movw	r24, r28
    1f2a:	01 96       	adiw	r24, 0x01	; 1
    1f2c:	9d 83       	std	Y+5, r25	; 0x05
    1f2e:	8c 83       	std	Y+4, r24	; 0x04
    1f30:	ea ea       	ldi	r30, 0xAA	; 170
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	ff 83       	std	Y+7, r31	; 0x07
    1f36:	ee 83       	std	Y+6, r30	; 0x06
    1f38:	f3 e0       	ldi	r31, 0x03	; 3
    1f3a:	f8 87       	std	Y+8, r31	; 0x08
    1f3c:	ee 81       	ldd	r30, Y+6	; 0x06
    1f3e:	ff 81       	ldd	r31, Y+7	; 0x07
    1f40:	00 80       	ld	r0, Z
    1f42:	8e 81       	ldd	r24, Y+6	; 0x06
    1f44:	9f 81       	ldd	r25, Y+7	; 0x07
    1f46:	01 96       	adiw	r24, 0x01	; 1
    1f48:	9f 83       	std	Y+7, r25	; 0x07
    1f4a:	8e 83       	std	Y+6, r24	; 0x06
    1f4c:	ec 81       	ldd	r30, Y+4	; 0x04
    1f4e:	fd 81       	ldd	r31, Y+5	; 0x05
    1f50:	00 82       	st	Z, r0
    1f52:	8c 81       	ldd	r24, Y+4	; 0x04
    1f54:	9d 81       	ldd	r25, Y+5	; 0x05
    1f56:	01 96       	adiw	r24, 0x01	; 1
    1f58:	9d 83       	std	Y+5, r25	; 0x05
    1f5a:	8c 83       	std	Y+4, r24	; 0x04
    1f5c:	98 85       	ldd	r25, Y+8	; 0x08
    1f5e:	91 50       	subi	r25, 0x01	; 1
    1f60:	98 87       	std	Y+8, r25	; 0x08
    1f62:	e8 85       	ldd	r30, Y+8	; 0x08
    1f64:	ee 23       	and	r30, r30
    1f66:	51 f7       	brne	.-44     	; 0x1f3c <EEPROM_init+0x28>
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init(&I2C_Config);
    1f68:	ce 01       	movw	r24, r28
    1f6a:	01 96       	adiw	r24, 0x01	; 1
    1f6c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <TWI_init>
}
    1f70:	28 96       	adiw	r28, 0x08	; 8
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	00 d0       	rcall	.+0      	; 0x1f88 <EEPROM_writeByte+0x6>
    1f88:	00 d0       	rcall	.+0      	; 0x1f8a <EEPROM_writeByte+0x8>
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	9a 83       	std	Y+2, r25	; 0x02
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1f94:	0e 94 96 10 	call	0x212c	; 0x212c <TWI_start>
    if (TWI_getStatus() != TW_START)
    1f98:	0e 94 ee 10 	call	0x21dc	; 0x21dc <TWI_getStatus>
    1f9c:	88 30       	cpi	r24, 0x08	; 8
    1f9e:	11 f0       	breq	.+4      	; 0x1fa4 <EEPROM_writeByte+0x22>
        return ERROR;
    1fa0:	1c 82       	std	Y+4, r1	; 0x04
    1fa2:	28 c0       	rjmp	.+80     	; 0x1ff4 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa8:	80 70       	andi	r24, 0x00	; 0
    1faa:	97 70       	andi	r25, 0x07	; 7
    1fac:	88 0f       	add	r24, r24
    1fae:	89 2f       	mov	r24, r25
    1fb0:	88 1f       	adc	r24, r24
    1fb2:	99 0b       	sbc	r25, r25
    1fb4:	91 95       	neg	r25
    1fb6:	80 6a       	ori	r24, 0xA0	; 160
    1fb8:	0e 94 b1 10 	call	0x2162	; 0x2162 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1fbc:	0e 94 ee 10 	call	0x21dc	; 0x21dc <TWI_getStatus>
    1fc0:	88 31       	cpi	r24, 0x18	; 24
    1fc2:	11 f0       	breq	.+4      	; 0x1fc8 <EEPROM_writeByte+0x46>
        return ERROR; 
    1fc4:	1c 82       	std	Y+4, r1	; 0x04
    1fc6:	16 c0       	rjmp	.+44     	; 0x1ff4 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	0e 94 b1 10 	call	0x2162	; 0x2162 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1fce:	0e 94 ee 10 	call	0x21dc	; 0x21dc <TWI_getStatus>
    1fd2:	88 32       	cpi	r24, 0x28	; 40
    1fd4:	11 f0       	breq	.+4      	; 0x1fda <EEPROM_writeByte+0x58>
        return ERROR;
    1fd6:	1c 82       	std	Y+4, r1	; 0x04
    1fd8:	0d c0       	rjmp	.+26     	; 0x1ff4 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	0e 94 b1 10 	call	0x2162	; 0x2162 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1fe0:	0e 94 ee 10 	call	0x21dc	; 0x21dc <TWI_getStatus>
    1fe4:	88 32       	cpi	r24, 0x28	; 40
    1fe6:	11 f0       	breq	.+4      	; 0x1fec <EEPROM_writeByte+0x6a>
        return ERROR;
    1fe8:	1c 82       	std	Y+4, r1	; 0x04
    1fea:	04 c0       	rjmp	.+8      	; 0x1ff4 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1fec:	0e 94 a6 10 	call	0x214c	; 0x214c <TWI_stop>
	
    return SUCCESS;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	8c 83       	std	Y+4, r24	; 0x04
    1ff4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	00 d0       	rcall	.+0      	; 0x200a <EEPROM_readByte+0x6>
    200a:	00 d0       	rcall	.+0      	; 0x200c <EEPROM_readByte+0x8>
    200c:	0f 92       	push	r0
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	9a 83       	std	Y+2, r25	; 0x02
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	7c 83       	std	Y+4, r23	; 0x04
    2018:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    201a:	0e 94 96 10 	call	0x212c	; 0x212c <TWI_start>
    if (TWI_getStatus() != TW_START)
    201e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <TWI_getStatus>
    2022:	88 30       	cpi	r24, 0x08	; 8
    2024:	11 f0       	breq	.+4      	; 0x202a <EEPROM_readByte+0x26>
        return ERROR;
    2026:	1d 82       	std	Y+5, r1	; 0x05
    2028:	44 c0       	rjmp	.+136    	; 0x20b2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	9a 81       	ldd	r25, Y+2	; 0x02
    202e:	80 70       	andi	r24, 0x00	; 0
    2030:	97 70       	andi	r25, 0x07	; 7
    2032:	88 0f       	add	r24, r24
    2034:	89 2f       	mov	r24, r25
    2036:	88 1f       	adc	r24, r24
    2038:	99 0b       	sbc	r25, r25
    203a:	91 95       	neg	r25
    203c:	80 6a       	ori	r24, 0xA0	; 160
    203e:	0e 94 b1 10 	call	0x2162	; 0x2162 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    2042:	0e 94 ee 10 	call	0x21dc	; 0x21dc <TWI_getStatus>
    2046:	88 31       	cpi	r24, 0x18	; 24
    2048:	11 f0       	breq	.+4      	; 0x204e <EEPROM_readByte+0x4a>
        return ERROR;
    204a:	1d 82       	std	Y+5, r1	; 0x05
    204c:	32 c0       	rjmp	.+100    	; 0x20b2 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	0e 94 b1 10 	call	0x2162	; 0x2162 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    2054:	0e 94 ee 10 	call	0x21dc	; 0x21dc <TWI_getStatus>
    2058:	88 32       	cpi	r24, 0x28	; 40
    205a:	11 f0       	breq	.+4      	; 0x2060 <EEPROM_readByte+0x5c>
        return ERROR;
    205c:	1d 82       	std	Y+5, r1	; 0x05
    205e:	29 c0       	rjmp	.+82     	; 0x20b2 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    2060:	0e 94 96 10 	call	0x212c	; 0x212c <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    2064:	0e 94 ee 10 	call	0x21dc	; 0x21dc <TWI_getStatus>
    2068:	80 31       	cpi	r24, 0x10	; 16
    206a:	11 f0       	breq	.+4      	; 0x2070 <EEPROM_readByte+0x6c>
        return ERROR;
    206c:	1d 82       	std	Y+5, r1	; 0x05
    206e:	21 c0       	rjmp	.+66     	; 0x20b2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	9a 81       	ldd	r25, Y+2	; 0x02
    2074:	80 70       	andi	r24, 0x00	; 0
    2076:	97 70       	andi	r25, 0x07	; 7
    2078:	88 0f       	add	r24, r24
    207a:	89 2f       	mov	r24, r25
    207c:	88 1f       	adc	r24, r24
    207e:	99 0b       	sbc	r25, r25
    2080:	91 95       	neg	r25
    2082:	81 6a       	ori	r24, 0xA1	; 161
    2084:	0e 94 b1 10 	call	0x2162	; 0x2162 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    2088:	0e 94 ee 10 	call	0x21dc	; 0x21dc <TWI_getStatus>
    208c:	80 34       	cpi	r24, 0x40	; 64
    208e:	11 f0       	breq	.+4      	; 0x2094 <EEPROM_readByte+0x90>
        return ERROR;
    2090:	1d 82       	std	Y+5, r1	; 0x05
    2092:	0f c0       	rjmp	.+30     	; 0x20b2 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    2094:	0e 94 db 10 	call	0x21b6	; 0x21b6 <TWI_readWithNACK>
    2098:	eb 81       	ldd	r30, Y+3	; 0x03
    209a:	fc 81       	ldd	r31, Y+4	; 0x04
    209c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    209e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <TWI_getStatus>
    20a2:	88 35       	cpi	r24, 0x58	; 88
    20a4:	11 f0       	breq	.+4      	; 0x20aa <EEPROM_readByte+0xa6>
        return ERROR;
    20a6:	1d 82       	std	Y+5, r1	; 0x05
    20a8:	04 c0       	rjmp	.+8      	; 0x20b2 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    20aa:	0e 94 a6 10 	call	0x214c	; 0x214c <TWI_stop>
    return SUCCESS;
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	8d 83       	std	Y+5, r24	; 0x05
    20b2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <TWI_init>:

/* Global variables to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

void TWI_init(const I2C_ConfigType * Config_Ptr)
{
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	00 d0       	rcall	.+0      	; 0x20ca <TWI_init+0x6>
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	89 83       	std	Y+1, r24	; 0x01
    TWBR =Config_Ptr-> TWBR_i2c;
    20d2:	a0 e2       	ldi	r26, 0x20	; 32
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e9 81       	ldd	r30, Y+1	; 0x01
    20d8:	fa 81       	ldd	r31, Y+2	; 0x02
    20da:	80 81       	ld	r24, Z
    20dc:	8c 93       	st	X, r24
	TWSR =Config_Ptr-> TWPS;
    20de:	a1 e2       	ldi	r26, 0x21	; 33
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e9 81       	ldd	r30, Y+1	; 0x01
    20e4:	fa 81       	ldd	r31, Y+2	; 0x02
    20e6:	81 81       	ldd	r24, Z+1	; 0x01
    20e8:	8c 93       	st	X, r24
	

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->slave_add;
    20ea:	a2 e2       	ldi	r26, 0x22	; 34
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e9 81       	ldd	r30, Y+1	; 0x01
    20f0:	fa 81       	ldd	r31, Y+2	; 0x02
    20f2:	82 81       	ldd	r24, Z+2	; 0x02
    20f4:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    20f6:	e6 e5       	ldi	r30, 0x56	; 86
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	84 e0       	ldi	r24, 0x04	; 4
    20fc:	80 83       	st	Z, r24
}
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	08 95       	ret

00002108 <I2C_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void I2C_setCallBack(void(*a_ptr)(void))
{
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	00 d0       	rcall	.+0      	; 0x210e <I2C_setCallBack+0x6>
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	9a 83       	std	Y+2, r25	; 0x02
    2114:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	9a 81       	ldd	r25, Y+2	; 0x02
    211a:	90 93 b0 00 	sts	0x00B0, r25
    211e:	80 93 af 00 	sts	0x00AF, r24
}
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <TWI_start>:

void TWI_start(void)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2134:	e6 e5       	ldi	r30, 0x56	; 86
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	84 ea       	ldi	r24, 0xA4	; 164
    213a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    213c:	e6 e5       	ldi	r30, 0x56	; 86
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	88 23       	and	r24, r24
    2144:	dc f7       	brge	.-10     	; 0x213c <TWI_start+0x10>
}
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	08 95       	ret

0000214c <TWI_stop>:

void TWI_stop(void)
{
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2154:	e6 e5       	ldi	r30, 0x56	; 86
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	84 e9       	ldi	r24, 0x94	; 148
    215a:	80 83       	st	Z, r24
}
    215c:	cf 91       	pop	r28
    215e:	df 91       	pop	r29
    2160:	08 95       	ret

00002162 <TWI_write>:

void TWI_write(uint8 data)
{
    2162:	df 93       	push	r29
    2164:	cf 93       	push	r28
    2166:	0f 92       	push	r0
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    216e:	e3 e2       	ldi	r30, 0x23	; 35
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2176:	e6 e5       	ldi	r30, 0x56	; 86
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	84 e8       	ldi	r24, 0x84	; 132
    217c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    217e:	e6 e5       	ldi	r30, 0x56	; 86
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	88 23       	and	r24, r24
    2186:	dc f7       	brge	.-10     	; 0x217e <TWI_write+0x1c>
}
    2188:	0f 90       	pop	r0
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2198:	e6 e5       	ldi	r30, 0x56	; 86
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	84 ec       	ldi	r24, 0xC4	; 196
    219e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    21a0:	e6 e5       	ldi	r30, 0x56	; 86
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	88 23       	and	r24, r24
    21a8:	dc f7       	brge	.-10     	; 0x21a0 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    21aa:	e3 e2       	ldi	r30, 0x23	; 35
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
}
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    21be:	e6 e5       	ldi	r30, 0x56	; 86
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	84 e8       	ldi	r24, 0x84	; 132
    21c4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    21c6:	e6 e5       	ldi	r30, 0x56	; 86
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	88 23       	and	r24, r24
    21ce:	dc f7       	brge	.-10     	; 0x21c6 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    21d0:	e3 e2       	ldi	r30, 0x23	; 35
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
}
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	0f 92       	push	r0
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    21e6:	e1 e2       	ldi	r30, 0x21	; 33
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	88 7f       	andi	r24, 0xF8	; 248
    21ee:	89 83       	std	Y+1, r24	; 0x01
    return status;
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    21f2:	0f 90       	pop	r0
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)//normal mode interrupt service routine
{
    21fa:	1f 92       	push	r1
    21fc:	0f 92       	push	r0
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	0f 92       	push	r0
    2202:	11 24       	eor	r1, r1
    2204:	2f 93       	push	r18
    2206:	3f 93       	push	r19
    2208:	4f 93       	push	r20
    220a:	5f 93       	push	r21
    220c:	6f 93       	push	r22
    220e:	7f 93       	push	r23
    2210:	8f 93       	push	r24
    2212:	9f 93       	push	r25
    2214:	af 93       	push	r26
    2216:	bf 93       	push	r27
    2218:	ef 93       	push	r30
    221a:	ff 93       	push	r31
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2224:	80 91 b1 00 	lds	r24, 0x00B1
    2228:	90 91 b2 00 	lds	r25, 0x00B2
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	29 f0       	breq	.+10     	; 0x223a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2230:	e0 91 b1 00 	lds	r30, 0x00B1
    2234:	f0 91 b2 00 	lds	r31, 0x00B2
    2238:	09 95       	icall
	}
}
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	ff 91       	pop	r31
    2240:	ef 91       	pop	r30
    2242:	bf 91       	pop	r27
    2244:	af 91       	pop	r26
    2246:	9f 91       	pop	r25
    2248:	8f 91       	pop	r24
    224a:	7f 91       	pop	r23
    224c:	6f 91       	pop	r22
    224e:	5f 91       	pop	r21
    2250:	4f 91       	pop	r20
    2252:	3f 91       	pop	r19
    2254:	2f 91       	pop	r18
    2256:	0f 90       	pop	r0
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	0f 90       	pop	r0
    225c:	1f 90       	pop	r1
    225e:	18 95       	reti

00002260 <__vector_19>:


/* Interrupt Service Routine for timer0 compare mode */
ISR(TIMER0_COMP_vect)
{
    2260:	1f 92       	push	r1
    2262:	0f 92       	push	r0
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	0f 92       	push	r0
    2268:	11 24       	eor	r1, r1
    226a:	2f 93       	push	r18
    226c:	3f 93       	push	r19
    226e:	4f 93       	push	r20
    2270:	5f 93       	push	r21
    2272:	6f 93       	push	r22
    2274:	7f 93       	push	r23
    2276:	8f 93       	push	r24
    2278:	9f 93       	push	r25
    227a:	af 93       	push	r26
    227c:	bf 93       	push	r27
    227e:	ef 93       	push	r30
    2280:	ff 93       	push	r31
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    228a:	80 91 b1 00 	lds	r24, 0x00B1
    228e:	90 91 b2 00 	lds	r25, 0x00B2
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	29 f0       	breq	.+10     	; 0x22a0 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2296:	e0 91 b1 00 	lds	r30, 0x00B1
    229a:	f0 91 b2 00 	lds	r31, 0x00B2
    229e:	09 95       	icall
	}

}
    22a0:	cf 91       	pop	r28
    22a2:	df 91       	pop	r29
    22a4:	ff 91       	pop	r31
    22a6:	ef 91       	pop	r30
    22a8:	bf 91       	pop	r27
    22aa:	af 91       	pop	r26
    22ac:	9f 91       	pop	r25
    22ae:	8f 91       	pop	r24
    22b0:	7f 91       	pop	r23
    22b2:	6f 91       	pop	r22
    22b4:	5f 91       	pop	r21
    22b6:	4f 91       	pop	r20
    22b8:	3f 91       	pop	r19
    22ba:	2f 91       	pop	r18
    22bc:	0f 90       	pop	r0
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	0f 90       	pop	r0
    22c2:	1f 90       	pop	r1
    22c4:	18 95       	reti

000022c6 <Timer0_init>:
 * 	2. Set the required mode.
 * 	3. Set the initial value.
 * 	4. set compare value in CTC mode.
 */
void Timer0_init(const Timer0_ConfigType * Config_Ptr )
{
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	00 d0       	rcall	.+0      	; 0x22cc <Timer0_init+0x6>
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	9a 83       	std	Y+2, r25	; 0x02
    22d2:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->mode == NORMAL){
    22d4:	e9 81       	ldd	r30, Y+1	; 0x01
    22d6:	fa 81       	ldd	r31, Y+2	; 0x02
    22d8:	81 81       	ldd	r24, Z+1	; 0x01
    22da:	88 23       	and	r24, r24
    22dc:	e9 f4       	brne	.+58     	; 0x2318 <Timer0_init+0x52>
		/* Initial Value for Timer0 */
		TCNT0 = Config_Ptr->initialValue;
    22de:	a2 e5       	ldi	r26, 0x52	; 82
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e9 81       	ldd	r30, Y+1	; 0x01
    22e4:	fa 81       	ldd	r31, Y+2	; 0x02
    22e6:	82 81       	ldd	r24, Z+2	; 0x02
    22e8:	8c 93       	st	X, r24
		/*
		 * insert the required clock value in the first three bits (CS00, CS01 and CS02)
		 * of TCCR0 Register
		 */
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->clock);
    22ea:	a3 e5       	ldi	r26, 0x53	; 83
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	e3 e5       	ldi	r30, 0x53	; 83
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	98 2f       	mov	r25, r24
    22f6:	98 7f       	andi	r25, 0xF8	; 248
    22f8:	e9 81       	ldd	r30, Y+1	; 0x01
    22fa:	fa 81       	ldd	r31, Y+2	; 0x02
    22fc:	80 81       	ld	r24, Z
    22fe:	89 2b       	or	r24, r25
    2300:	8c 93       	st	X, r24
		TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    2302:	a9 e5       	ldi	r26, 0x59	; 89
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e9 e5       	ldi	r30, 0x59	; 89
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	81 60       	ori	r24, 0x01	; 1
    230e:	8c 93       	st	X, r24
		/* Configure the timer control register
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 */
		TCCR0 = (1<<FOC0) ;
    2310:	e3 e5       	ldi	r30, 0x53	; 83
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 e8       	ldi	r24, 0x80	; 128
    2316:	80 83       	st	Z, r24
	}


	if(Config_Ptr->mode == COMPARE){
    2318:	e9 81       	ldd	r30, Y+1	; 0x01
    231a:	fa 81       	ldd	r31, Y+2	; 0x02
    231c:	81 81       	ldd	r24, Z+1	; 0x01
    231e:	81 30       	cpi	r24, 0x01	; 1
    2320:	19 f5       	brne	.+70     	; 0x2368 <Timer0_init+0xa2>
		/* Initial Value for Timer0 */
		TCNT0 = Config_Ptr->initialValue;
    2322:	a2 e5       	ldi	r26, 0x52	; 82
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e9 81       	ldd	r30, Y+1	; 0x01
    2328:	fa 81       	ldd	r31, Y+2	; 0x02
    232a:	82 81       	ldd	r24, Z+2	; 0x02
    232c:	8c 93       	st	X, r24

		/* compare Value for Timer0 */
		OCR0 = Config_Ptr->CTCvalue;
    232e:	ac e5       	ldi	r26, 0x5C	; 92
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	e9 81       	ldd	r30, Y+1	; 0x01
    2334:	fa 81       	ldd	r31, Y+2	; 0x02
    2336:	83 81       	ldd	r24, Z+3	; 0x03
    2338:	8c 93       	st	X, r24
		/*
		 * insert the required clock value in the first three bits (CS00, CS01 and CS02)
		 * of TCCR0 Register
		 */
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->clock);
    233a:	a3 e5       	ldi	r26, 0x53	; 83
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	e3 e5       	ldi	r30, 0x53	; 83
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	98 2f       	mov	r25, r24
    2346:	98 7f       	andi	r25, 0xF8	; 248
    2348:	e9 81       	ldd	r30, Y+1	; 0x01
    234a:	fa 81       	ldd	r31, Y+2	; 0x02
    234c:	80 81       	ld	r24, Z
    234e:	89 2b       	or	r24, r25
    2350:	8c 93       	st	X, r24

		TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    2352:	a9 e5       	ldi	r26, 0x59	; 89
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	e9 e5       	ldi	r30, 0x59	; 89
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	82 60       	ori	r24, 0x02	; 2
    235e:	8c 93       	st	X, r24
		/* Configure timer0 control register
		 * 1. Non PWM mode FOC0=1
		 * 2. CTC Mode WGM01=1 & WGM00=0
		 * 3. No need for OC0 in this example so COM00=0 & COM01=0
		 */
		TCCR0 = (1<<FOC0) | (1<<WGM01) ;
    2360:	e3 e5       	ldi	r30, 0x53	; 83
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	88 e8       	ldi	r24, 0x88	; 136
    2366:	80 83       	st	Z, r24
	}
}
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <Timer0_setCallBack>:

	/*
	 * Description: Function to set the Call Back function address.
	 */
	void Timer0_setCallBack(void(*a_ptr)(void))
	{
    2372:	df 93       	push	r29
    2374:	cf 93       	push	r28
    2376:	00 d0       	rcall	.+0      	; 0x2378 <Timer0_setCallBack+0x6>
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	9a 83       	std	Y+2, r25	; 0x02
    237e:	89 83       	std	Y+1, r24	; 0x01
		/* Save the address of the Call back function in a global variable */
		g_callBackPtr = a_ptr;
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	9a 81       	ldd	r25, Y+2	; 0x02
    2384:	90 93 b2 00 	sts	0x00B2, r25
    2388:	80 93 b1 00 	sts	0x00B1, r24
	}
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <Timer0_DeInit>:

	/*
	 * Description: Function to disable the Timer0
	 */
	void Timer0_DeInit(void)
	{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
		/* Clear All Timer0 Registers */
		TCCR0 = 0;
    239e:	e3 e5       	ldi	r30, 0x53	; 83
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	10 82       	st	Z, r1
		TCNT0 = 0;
    23a4:	e2 e5       	ldi	r30, 0x52	; 82
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	10 82       	st	Z, r1
		OCR0 = 0;
    23aa:	ec e5       	ldi	r30, 0x5C	; 92
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	10 82       	st	Z, r1

		/* Disable the Timer overflow interrupt & output compare match interrupt*/
		TIMSK &= ~(1<<TOIE0);
    23b0:	a9 e5       	ldi	r26, 0x59	; 89
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	e9 e5       	ldi	r30, 0x59	; 89
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	8e 7f       	andi	r24, 0xFE	; 254
    23bc:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE0);
    23be:	a9 e5       	ldi	r26, 0x59	; 89
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	e9 e5       	ldi	r30, 0x59	; 89
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	8d 7f       	andi	r24, 0xFD	; 253
    23ca:	8c 93       	st	X, r24

	}
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <UART_init>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const UART_ConfigType * Config_Ptr)
{
    23d2:	0f 93       	push	r16
    23d4:	1f 93       	push	r17
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	00 d0       	rcall	.+0      	; 0x23dc <UART_init+0xa>
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	9a 83       	std	Y+2, r25	; 0x02
    23e2:	89 83       	std	Y+1, r24	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    23e4:	eb e2       	ldi	r30, 0x2B	; 43
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	82 e0       	ldi	r24, 0x02	; 2
    23ea:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = For data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    23ec:	ea e2       	ldi	r30, 0x2A	; 42
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	88 e1       	ldi	r24, 0x18	; 24
    23f2:	80 83       	st	Z, r24
	UCSRB=  (UCSRC & 0xFB) | (Config_Ptr->bitDataMode);
    23f4:	aa e2       	ldi	r26, 0x2A	; 42
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e0 e4       	ldi	r30, 0x40	; 64
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	98 2f       	mov	r25, r24
    2400:	9b 7f       	andi	r25, 0xFB	; 251
    2402:	e9 81       	ldd	r30, Y+1	; 0x01
    2404:	fa 81       	ldd	r31, Y+2	; 0x02
    2406:	81 81       	ldd	r24, Z+1	; 0x01
    2408:	89 2b       	or	r24, r25
    240a:	8c 93       	st	X, r24
	 * UPM1:0  =  parity bit
	 * USBS    =  stop bit
	 * UCSZ1:0 =  data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    240c:	e0 e4       	ldi	r30, 0x40	; 64
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 e8       	ldi	r24, 0x80	; 128
    2412:	80 83       	st	Z, r24
	UCSRC=  (UCSRC & 0xF9) | (Config_Ptr->numBitData);
    2414:	a0 e4       	ldi	r26, 0x40	; 64
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	e0 e4       	ldi	r30, 0x40	; 64
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	98 2f       	mov	r25, r24
    2420:	99 7f       	andi	r25, 0xF9	; 249
    2422:	e9 81       	ldd	r30, Y+1	; 0x01
    2424:	fa 81       	ldd	r31, Y+2	; 0x02
    2426:	80 81       	ld	r24, Z
    2428:	89 2b       	or	r24, r25
    242a:	8c 93       	st	X, r24
	UCSRC=  (UCSRC & 0xCF) | (Config_Ptr->parity);
    242c:	a0 e4       	ldi	r26, 0x40	; 64
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	e0 e4       	ldi	r30, 0x40	; 64
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	98 2f       	mov	r25, r24
    2438:	9f 7c       	andi	r25, 0xCF	; 207
    243a:	e9 81       	ldd	r30, Y+1	; 0x01
    243c:	fa 81       	ldd	r31, Y+2	; 0x02
    243e:	82 81       	ldd	r24, Z+2	; 0x02
    2440:	89 2b       	or	r24, r25
    2442:	8c 93       	st	X, r24
	UCSRC=  (UCSRC & 0xF8) | (Config_Ptr->stop);
    2444:	a0 e4       	ldi	r26, 0x40	; 64
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e0 e4       	ldi	r30, 0x40	; 64
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	98 2f       	mov	r25, r24
    2450:	98 7f       	andi	r25, 0xF8	; 248
    2452:	e9 81       	ldd	r30, Y+1	; 0x01
    2454:	fa 81       	ldd	r31, Y+2	; 0x02
    2456:	83 81       	ldd	r24, Z+3	; 0x03
    2458:	89 2b       	or	r24, r25
    245a:	8c 93       	st	X, r24


	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    245c:	00 e4       	ldi	r16, 0x40	; 64
    245e:	10 e0       	ldi	r17, 0x00	; 0
    2460:	e9 81       	ldd	r30, Y+1	; 0x01
    2462:	fa 81       	ldd	r31, Y+2	; 0x02
    2464:	84 81       	ldd	r24, Z+4	; 0x04
    2466:	95 81       	ldd	r25, Z+5	; 0x05
    2468:	cc 01       	movw	r24, r24
    246a:	a0 e0       	ldi	r26, 0x00	; 0
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	aa 1f       	adc	r26, r26
    2474:	bb 1f       	adc	r27, r27
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	aa 1f       	adc	r26, r26
    247c:	bb 1f       	adc	r27, r27
    247e:	88 0f       	add	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	aa 1f       	adc	r26, r26
    2484:	bb 1f       	adc	r27, r27
    2486:	9c 01       	movw	r18, r24
    2488:	ad 01       	movw	r20, r26
    248a:	80 e4       	ldi	r24, 0x40	; 64
    248c:	92 e4       	ldi	r25, 0x42	; 66
    248e:	af e0       	ldi	r26, 0x0F	; 15
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	bc 01       	movw	r22, r24
    2494:	cd 01       	movw	r24, r26
    2496:	0e 94 27 13 	call	0x264e	; 0x264e <__udivmodsi4>
    249a:	da 01       	movw	r26, r20
    249c:	c9 01       	movw	r24, r18
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	a1 09       	sbc	r26, r1
    24a2:	b1 09       	sbc	r27, r1
    24a4:	89 2f       	mov	r24, r25
    24a6:	9a 2f       	mov	r25, r26
    24a8:	ab 2f       	mov	r26, r27
    24aa:	bb 27       	eor	r27, r27
    24ac:	f8 01       	movw	r30, r16
    24ae:	80 83       	st	Z, r24
	UBRRL = BAUD_PRESCALE;
    24b0:	09 e2       	ldi	r16, 0x29	; 41
    24b2:	10 e0       	ldi	r17, 0x00	; 0
    24b4:	e9 81       	ldd	r30, Y+1	; 0x01
    24b6:	fa 81       	ldd	r31, Y+2	; 0x02
    24b8:	84 81       	ldd	r24, Z+4	; 0x04
    24ba:	95 81       	ldd	r25, Z+5	; 0x05
    24bc:	cc 01       	movw	r24, r24
    24be:	a0 e0       	ldi	r26, 0x00	; 0
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	88 0f       	add	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	aa 1f       	adc	r26, r26
    24c8:	bb 1f       	adc	r27, r27
    24ca:	88 0f       	add	r24, r24
    24cc:	99 1f       	adc	r25, r25
    24ce:	aa 1f       	adc	r26, r26
    24d0:	bb 1f       	adc	r27, r27
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	aa 1f       	adc	r26, r26
    24d8:	bb 1f       	adc	r27, r27
    24da:	9c 01       	movw	r18, r24
    24dc:	ad 01       	movw	r20, r26
    24de:	80 e4       	ldi	r24, 0x40	; 64
    24e0:	92 e4       	ldi	r25, 0x42	; 66
    24e2:	af e0       	ldi	r26, 0x0F	; 15
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	bc 01       	movw	r22, r24
    24e8:	cd 01       	movw	r24, r26
    24ea:	0e 94 27 13 	call	0x264e	; 0x264e <__udivmodsi4>
    24ee:	da 01       	movw	r26, r20
    24f0:	c9 01       	movw	r24, r18
    24f2:	81 50       	subi	r24, 0x01	; 1
    24f4:	f8 01       	movw	r30, r16
    24f6:	80 83       	st	Z, r24
}
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	cf 91       	pop	r28
    24fe:	df 91       	pop	r29
    2500:	1f 91       	pop	r17
    2502:	0f 91       	pop	r16
    2504:	08 95       	ret

00002506 <UART_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void UART_setCallBack(void(*a_ptr)(void))
{
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	00 d0       	rcall	.+0      	; 0x250c <UART_setCallBack+0x6>
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	9a 83       	std	Y+2, r25	; 0x02
    2512:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	9a 81       	ldd	r25, Y+2	; 0x02
    2518:	90 93 b4 00 	sts	0x00B4, r25
    251c:	80 93 b3 00 	sts	0x00B3, r24
}
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	0f 92       	push	r0
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2536:	eb e2       	ldi	r30, 0x2B	; 43
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	88 2f       	mov	r24, r24
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	80 72       	andi	r24, 0x20	; 32
    2542:	90 70       	andi	r25, 0x00	; 0
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	b9 f3       	breq	.-18     	; 0x2536 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    2548:	ec e2       	ldi	r30, 0x2C	; 44
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2550:	0f 90       	pop	r0
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2560:	eb e2       	ldi	r30, 0x2B	; 43
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	88 23       	and	r24, r24
    2568:	dc f7       	brge	.-10     	; 0x2560 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    256a:	ec e2       	ldi	r30, 0x2C	; 44
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
}
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	08 95       	ret

00002576 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	00 d0       	rcall	.+0      	; 0x257c <UART_sendString+0x6>
    257c:	0f 92       	push	r0
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	9b 83       	std	Y+3, r25	; 0x03
    2584:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2586:	19 82       	std	Y+1, r1	; 0x01
    2588:	0e c0       	rjmp	.+28     	; 0x25a6 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	28 2f       	mov	r18, r24
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	9b 81       	ldd	r25, Y+3	; 0x03
    2594:	fc 01       	movw	r30, r24
    2596:	e2 0f       	add	r30, r18
    2598:	f3 1f       	adc	r31, r19
    259a:	80 81       	ld	r24, Z
    259c:	0e 94 95 12 	call	0x252a	; 0x252a <UART_sendByte>
		i++;
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	8f 5f       	subi	r24, 0xFF	; 255
    25a4:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	28 2f       	mov	r18, r24
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	9b 81       	ldd	r25, Y+3	; 0x03
    25b0:	fc 01       	movw	r30, r24
    25b2:	e2 0f       	add	r30, r18
    25b4:	f3 1f       	adc	r31, r19
    25b6:	80 81       	ld	r24, Z
    25b8:	88 23       	and	r24, r24
    25ba:	39 f7       	brne	.-50     	; 0x258a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	08 95       	ret

000025c8 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    25c8:	0f 93       	push	r16
    25ca:	1f 93       	push	r17
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <UART_receiveString+0xa>
    25d2:	0f 92       	push	r0
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    25d8:	9b 83       	std	Y+3, r25	; 0x03
    25da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25dc:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	8a 81       	ldd	r24, Y+2	; 0x02
    25e6:	9b 81       	ldd	r25, Y+3	; 0x03
    25e8:	8c 01       	movw	r16, r24
    25ea:	02 0f       	add	r16, r18
    25ec:	13 1f       	adc	r17, r19
    25ee:	0e 94 ac 12 	call	0x2558	; 0x2558 <UART_recieveByte>
    25f2:	f8 01       	movw	r30, r16
    25f4:	80 83       	st	Z, r24
    25f6:	0f c0       	rjmp	.+30     	; 0x2616 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	8f 5f       	subi	r24, 0xFF	; 255
    25fc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	28 2f       	mov	r18, r24
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	9b 81       	ldd	r25, Y+3	; 0x03
    2608:	8c 01       	movw	r16, r24
    260a:	02 0f       	add	r16, r18
    260c:	13 1f       	adc	r17, r19
    260e:	0e 94 ac 12 	call	0x2558	; 0x2558 <UART_recieveByte>
    2612:	f8 01       	movw	r30, r16
    2614:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	28 2f       	mov	r18, r24
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	8a 81       	ldd	r24, Y+2	; 0x02
    261e:	9b 81       	ldd	r25, Y+3	; 0x03
    2620:	fc 01       	movw	r30, r24
    2622:	e2 0f       	add	r30, r18
    2624:	f3 1f       	adc	r31, r19
    2626:	80 81       	ld	r24, Z
    2628:	83 32       	cpi	r24, 0x23	; 35
    262a:	31 f7       	brne	.-52     	; 0x25f8 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	9b 81       	ldd	r25, Y+3	; 0x03
    2636:	fc 01       	movw	r30, r24
    2638:	e2 0f       	add	r30, r18
    263a:	f3 1f       	adc	r31, r19
    263c:	10 82       	st	Z, r1
}
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	1f 91       	pop	r17
    264a:	0f 91       	pop	r16
    264c:	08 95       	ret

0000264e <__udivmodsi4>:
    264e:	a1 e2       	ldi	r26, 0x21	; 33
    2650:	1a 2e       	mov	r1, r26
    2652:	aa 1b       	sub	r26, r26
    2654:	bb 1b       	sub	r27, r27
    2656:	fd 01       	movw	r30, r26
    2658:	0d c0       	rjmp	.+26     	; 0x2674 <__udivmodsi4_ep>

0000265a <__udivmodsi4_loop>:
    265a:	aa 1f       	adc	r26, r26
    265c:	bb 1f       	adc	r27, r27
    265e:	ee 1f       	adc	r30, r30
    2660:	ff 1f       	adc	r31, r31
    2662:	a2 17       	cp	r26, r18
    2664:	b3 07       	cpc	r27, r19
    2666:	e4 07       	cpc	r30, r20
    2668:	f5 07       	cpc	r31, r21
    266a:	20 f0       	brcs	.+8      	; 0x2674 <__udivmodsi4_ep>
    266c:	a2 1b       	sub	r26, r18
    266e:	b3 0b       	sbc	r27, r19
    2670:	e4 0b       	sbc	r30, r20
    2672:	f5 0b       	sbc	r31, r21

00002674 <__udivmodsi4_ep>:
    2674:	66 1f       	adc	r22, r22
    2676:	77 1f       	adc	r23, r23
    2678:	88 1f       	adc	r24, r24
    267a:	99 1f       	adc	r25, r25
    267c:	1a 94       	dec	r1
    267e:	69 f7       	brne	.-38     	; 0x265a <__udivmodsi4_loop>
    2680:	60 95       	com	r22
    2682:	70 95       	com	r23
    2684:	80 95       	com	r24
    2686:	90 95       	com	r25
    2688:	9b 01       	movw	r18, r22
    268a:	ac 01       	movw	r20, r24
    268c:	bd 01       	movw	r22, r26
    268e:	cf 01       	movw	r24, r30
    2690:	08 95       	ret

00002692 <__prologue_saves__>:
    2692:	2f 92       	push	r2
    2694:	3f 92       	push	r3
    2696:	4f 92       	push	r4
    2698:	5f 92       	push	r5
    269a:	6f 92       	push	r6
    269c:	7f 92       	push	r7
    269e:	8f 92       	push	r8
    26a0:	9f 92       	push	r9
    26a2:	af 92       	push	r10
    26a4:	bf 92       	push	r11
    26a6:	cf 92       	push	r12
    26a8:	df 92       	push	r13
    26aa:	ef 92       	push	r14
    26ac:	ff 92       	push	r15
    26ae:	0f 93       	push	r16
    26b0:	1f 93       	push	r17
    26b2:	cf 93       	push	r28
    26b4:	df 93       	push	r29
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	ca 1b       	sub	r28, r26
    26bc:	db 0b       	sbc	r29, r27
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	de bf       	out	0x3e, r29	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	09 94       	ijmp

000026ca <__epilogue_restores__>:
    26ca:	2a 88       	ldd	r2, Y+18	; 0x12
    26cc:	39 88       	ldd	r3, Y+17	; 0x11
    26ce:	48 88       	ldd	r4, Y+16	; 0x10
    26d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    26d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    26d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    26d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    26d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    26da:	aa 84       	ldd	r10, Y+10	; 0x0a
    26dc:	b9 84       	ldd	r11, Y+9	; 0x09
    26de:	c8 84       	ldd	r12, Y+8	; 0x08
    26e0:	df 80       	ldd	r13, Y+7	; 0x07
    26e2:	ee 80       	ldd	r14, Y+6	; 0x06
    26e4:	fd 80       	ldd	r15, Y+5	; 0x05
    26e6:	0c 81       	ldd	r16, Y+4	; 0x04
    26e8:	1b 81       	ldd	r17, Y+3	; 0x03
    26ea:	aa 81       	ldd	r26, Y+2	; 0x02
    26ec:	b9 81       	ldd	r27, Y+1	; 0x01
    26ee:	ce 0f       	add	r28, r30
    26f0:	d1 1d       	adc	r29, r1
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	de bf       	out	0x3e, r29	; 62
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	cd bf       	out	0x3d, r28	; 61
    26fc:	ed 01       	movw	r28, r26
    26fe:	08 95       	ret

00002700 <_exit>:
    2700:	f8 94       	cli

00002702 <__stop_program>:
    2702:	ff cf       	rjmp	.-2      	; 0x2702 <__stop_program>
